# ==================== نظام السحب ====================
async def show_withdraw_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """عرض قائمة السحب"""
    try:
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        user_data = get_user_data(user_id)
        balance = user_data[4] if user_data else 0

        keyboard = [
            [InlineKeyboardButton("💳 سحب الأرباح (24 ساعة)", callback_data="withdraw_profits")],
            [InlineKeyboardButton("🎁 سحب المكافآت (أسبوعي)", callback_data="withdraw_bonus")],
            [InlineKeyboardButton("🔙 رجوع", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"💳 نظام السحب\n\n"
            f"💰 رصيدك الحالي: {balance:.2f} USDT\n\n"
            f"📋 خيارات السحب:\n"
            f"• سحب الأرباح: كل 24 ساعة (25$ - 1000$)\n"
            f"• سحب المكافآت: كل أسبوع (لا حدود)\n\n"
            f"اختر نوع السحب:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"❌ خطأ في عرض قائمة السحب: {e}")
        await send_error_notification(f"خطأ في عرض قائمة السحب: {e}")
# ==================== نظام السحب ====================
async def show_withdraw_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """عرض قائمة السحب"""
    try:
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        user_data = get_user_data(user_id)
        balance = user_data[4] if user_data else 0

        keyboard = [
            [InlineKeyboardButton("💳 سحب الأرباح (24 ساعة)", callback_data="withdraw_profits")],
            [InlineKeyboardButton("🎁 سحب المكافآت (أسبوعي)", callback_data="withdraw_bonus")],
            [InlineKeyboardButton("🔙 رجوع", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"💳 نظام السحب\n\n"
            f"💰 رصيدك الحالي: {balance:.2f} USDT\n\n"
            f"📋 خيارات السحب:\n"
            f"• سحب الأرباح: كل 24 ساعة (25$ - 1000$)\n"
            f"• سحب المكافآت: كل أسبوع (لا حدود)\n\n"
            f"اختر نوع السحب:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"❌ خطأ في عرض قائمة السحب: {e}")
        await send_error_notification(f"خطأ في عرض قائمة السحب: {e}")
# ==================== معالجة عنوان المحفظة====================
async def handle_wallet_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة عنوان المحفظة مع نظام الإدارة"""
    try:
        user_id = update.effective_user.id
        wallet_address = update.message.text.strip()

        # إرسال "جاري معالجة الطلب" فوراً
        processing_msg = await update.message.reply_text(
            "🔄 جاري معالجة طلبك...\n\n"
            "سيتم مراجعة عنوان المحفظة وتفعيله خلال دقائق."
        )

        # تحقق من عنوان المحفظة
        if len(wallet_address) < 10 or not wallet_address.startswith(('0x', '1', '3', 'bc1')):
            await processing_msg.edit_text(
                "❌ عنوان المحفظة غير صالح. يرجى إرسال عنوان صحيح:"
            )
            return

        # حفظ في قاعدة البيانات
        conn = sqlite3.connect('trading_bot.db')
        c = conn.cursor()
        c.execute(
            'UPDATE users SET wallet_address = ? WHERE user_id = ?',
            (wallet_address, user_id)
        )
        conn.commit()
        conn.close()

        # مسح حالة الانتظار
        del context.user_data['awaiting_wallet']

        await processing_msg.edit_text(
            f"✅ تم استلام عنوان محفظتك بنجاح!\n\n"
            f"📍 العنوان: {wallet_address}\n\n"
            f"🔄 جاري المراجعة من قبل الإدارة...\n"
            f"سيتم إعلامك فور التفعيل."
        )

        # إرسال طلب التحويل للقناة مع الأزرار
        keyboard = [
            [InlineKeyboardButton("✅ تم التحويل", callback_data=f"confirm_transfer:{user_id}")],
            [InlineKeyboardButton("❌ تم الرفض", callback_data=f"reject_transfer:{user_id}")],
            [InlineKeyboardButton("📩 إرسال رسالة", callback_data=f"message_user:{user_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"🔄 طلب تحويل جديد:\n\n"
                 f"👤 المستخدم: {user_id}\n"
                 f"📛 الاسم: {update.effective_user.first_name}\n"
                 f"🔗 المستخدم: @{update.effective_user.username or 'بدون'}\n"
                 f"📍 المحفظة: {wallet_address}\n\n"
                 f"⏰ الوقت: {update.message.date}",
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"خطأ في حفظ المحفظة: {e}")
        await update.message.reply_text("❌ حدث خطأ في حفظ المحفظة. حاول مرة أخرى.")
    except Exception as e:
        print(f"❌ خطأ في معالجة طلب السحب: {e}")
        await update.message.reply_text("❌ حدث خطأ في معالجة طلب السحب. يرجى المحاولة مرة أخرى.")
async def handle_approve_withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """موافقة الأدمن على السحب"""
    try:
        query = update.callback_query
        data = query.data.split('_')
        user_id = int(data[2])
        amount = float(data[3])

        # خصم المبلغ بعد الموافقة
        conn = sqlite3.connect('trading_bot.db')
        c = conn.cursor()
        c.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (amount, user_id))
        c.execute("UPDATE withdraw_requests SET status = 'approved' WHERE user_id = ? AND status = 'pending'", (user_id,))
        conn.commit()
        conn.close()

        # إشعار المستخدم
        app = Application.builder().token(MAIN_BOT_TOKEN).build()
        await app.bot.send_message(
            chat_id=user_id,
            text=f"✅ تمت الموافقة على سحبك!\n\n"
                 f"💰 المبلغ: {amount} USDT\n"
                 f"💳 تم تحويل المبلغ لمحفظتك\n"
                 f"⏰ قد يستغرق التحويل 2-24 ساعة\n\n"
                 f"شكراً لاستخدامك خدماتنا! 🎉"
        )

        await query.edit_message_text(
            f"✅ تمت الموافقة على سحب المستخدم {user_id}\n"
            f"💰 المبلغ: {amount} USDT\n\n"
            f"📞 تم إعلام المستخدم بالتحويل."
        )

    except Exception as e:
        print(f"❌ خطأ في الموافقة على السحب: {e}")

async def handle_reject_withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """رفض الأدمن للسحب"""
    try:
        query = update.callback_query
        data = query.data.split('_')
        user_id = int(data[2])
        amount = float(data[3])

        # تحديث حالة الطلب فقط (بدون خصم)
        conn = sqlite3.connect('trading_bot.db')
        c = conn.cursor()
        c.execute("UPDATE withdraw_requests SET status = 'rejected' WHERE user_id = ? AND status = 'pending'", (user_id,))
        conn.commit()
        conn.close()

        # إشعار المستخدم
        app = Application.builder().token(MAIN_BOT_TOKEN).build()
        await app.bot.send_message(
            chat_id=user_id,
            text=f"❌ تم رفض طلب السحب\n\n"
                 f"💰 المبلغ: {amount} USDT\n"
                 f"💳 لم يتم خصم أي مبلغ من رصيدك\n\n"
                 f"📞 للاستفسار، تواصل مع الدعم."
        )

        await query.edit_message_text(
            f"❌ تم رفض سحب المستخدم {user_id}\n"
            f"💰 المبلغ: {amount} USDT\n\n"
            f"💳 لم يتم خصم الرصيد."
        )

    except Exception as e:
        print(f"❌ خطأ في رفض السحب: {e}")

async def handle_withdraw_profits(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة سحب الأرباح"""
    try:
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        user_data = get_user_data(user_id)
        balance = user_data[4] if user_data else 0

        # التحقق من الحد الأدنى
        if balance < 25:
            await query.edit_message_text(
                f"❌ لا يمكن السحب\n\n"
                f"💰 رصيدك الحالي: {balance:.2f} USDT\n"
                f"📊 الحد الأدنى للسحب: 25 USDT\n\n"
                f"💡 استمر في التداول لتجميع الأرباح!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("🔙 رجوع", callback_data="withdraw_menu")]
                ])
            )
            return

        # عرض خيارات السحب
        keyboard = [
            [InlineKeyboardButton("25 USDT", callback_data="withdraw_amount_25")],
            [InlineKeyboardButton("50 USDT", callback_data="withdraw_amount_50")],
            [InlineKeyboardButton("100 USDT", callback_data="withdraw_amount_100")],
            [InlineKeyboardButton("250 USDT", callback_data="withdraw_amount_250")],
            [InlineKeyboardButton("500 USDT", callback_data="withdraw_amount_500")],
            [InlineKeyboardButton("1000 USDT", callback_data="withdraw_amount_1000")],
            [InlineKeyboardButton("🔙 رجوع", callback_data="withdraw_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"💳 سحب الأرباح\n\n"
            f"💰 رصيدك الحالي: {balance:.2f} USDT\n"
            f"⏰ مدة المعالجة: 24 ساعة\n\n"
            f"📊 اختر مبلغ السحب:",
            reply_markup=reply_markup
        )

    except Exception as e:
        print(f"❌ خطأ في سحب الأرباح: {e}")

async def handle_withdraw_bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة سحب المكافآت"""
    try:
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        user_data = get_user_data(user_id)
        balance = user_data[4] if user_data else 0

        # طلب معلومات المحفظة
        context.user_data['awaiting_wallet'] = True
        context.user_data['withdraw_type'] = 'bonus'

        await query.edit_message_text(
            f"🎁 سحب المكافآت\n\n"
            f"💰 رصيدك الحالي: {balance:.2f} USDT\n"
            f"⏰ مدة المعالجة: 48 ساعة\n\n"
            f"💳 الرجاء إرسال عنوان محفظتك USDT (TRC20):\n\n"
            f"📝 مثال:\n"
            f"TYy5CnBE3k6g5aNZhTNLX1WEnLk6fQ5Xz2",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("🔙 رجوع", callback_data="withdraw_menu")]
            ])
        )

    except Exception as e:
        print(f"❌ خطأ في سحب المكافآت: {e}")

async def handle_withdraw_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة مبلغ السحب المحدد"""
    try:
        query = update.callback_query
        await query.answer()

        data = query.data
        amount = int(data.split('_')[2])  # withdraw_amount_100 → 100

        user_id = query.from_user.id
        user_data = get_user_data(user_id)
        balance = user_data[4] if user_data else 0

        if balance < amount:
            await query.answer(f"❌ رصيدك غير كافي", show_alert=True)
            return

        # طلب معلومات المحفظة
        context.user_data['awaiting_wallet'] = True
        context.user_data['withdraw_type'] = 'profits'
        context.user_data['withdraw_amount'] = amount

        await query.edit_message_text(
            f"💳 تأكيد السحب\n\n"
            f"📊 المبلغ: {amount} USDT\n"
            f"💰 الرصيد بعد السحب: {balance - amount:.2f} USDT\n"
            f"⏰ مدة المعالجة: 24 ساعة\n\n"
            f"💳 الرجاء إرسال عنوان محفظتك USDT (TRC20):",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("🔙 رجوع", callback_data="withdraw_profits")]
            ])
        )
    except Exception as e:
        print(f"❌ خطأ في معالجة مبلغ السحب: {e}")

async def handle_approve_withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """موافقة الأدمن على السحب"""
    try:
        query = update.callback_query
        await query.answer("✅ تمت الموافقة على السحب")

        # مجرد تأكيد بسيط
        await query.edit_message_text("✅ تمت الموافقة على طلب السحب بنجاح!")

    except Exception as e:
        print(f"❌ خطأ في الموافقة على السحب: {e}")

async def handle_reject_withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """رفض الأدمن للسحب"""
    try:
        query = update.callback_query
        await query.answer("❌ تم رفض السحب")

        # مجرد تأكيد بسيط
        await query.edit_message_text("❌ تم رفض طلب السحب!")

    except Exception as e:
        print(f"❌ خطأ في رفض السحب: {e}")

async def handle_withdrawal_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة طلبات السحب بدون حفظ عنوان المحفظة"""
    try:
        user_id = update.effective_user.id

        # التحقق إذا المستخدم مسجل
        conn = sqlite3.connect('trading_bot.db')
        c = conn.cursor()
        c.execute('SELECT balance, full_name FROM users WHERE user_id = ?', (user_id,))
        user_data = c.fetchone()
        conn.close()

        if not user_data:
            await update.message.reply_text("❌ يجب التسجيل أولاً باستخدام /start")
            return

        balance, full_name = user_data

        if balance <= 0:
            await update.message.reply_text("❌ رصيدك غير كافي للسحب")
            return

        # طلب عنوان المحفظة مباشرة للسحب الحالي
        context.user_data['awaiting_withdrawal_wallet'] = True
        context.user_data['withdrawal_user_id'] = user_id

        await update.message.reply_text(
            f"💰 طلب سحب جديد\n\n"
            f"👤 المستخدم: {full_name}\n"
            f"💳 الرصيد المتاح: {balance}\n\n"
            "🔗 يرجى إرسال عنوان المحفظة للسحب:"
        )

    except Exception as e:
        logger.error(f"خطأ في طلب السحب: {e}")
        await update.message.reply_text("❌ حدث خطأ في معالجة طلبك")

async def handle_withdrawal_wallet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة عنوان المحفظة للسحب الحالي فقط"""
    try:
        user_id = context.user_data.get('withdrawal_user_id')
        wallet_address = update.message.text.strip()
        amount = context.user_data.get('withdrawal_amount')

        if not user_id:
            await update.message.reply_text("❌ جلسة منتهية، ابدأ طلب سحب جديد")
            return

        # تحقق بسيط من العنوان
        if len(wallet_address) < 10:
            await update.message.reply_text("❌ عنوان المحفظة قصير جداً")
            return

        # الحصول على بيانات المستخدم
        conn = sqlite3.connect('trading_bot.db')
        c = conn.cursor()
        c.execute('SELECT balance, full_name, username FROM users WHERE user_id = ?', (user_id,))
        user_data = c.fetchone()
        conn.close()

        if not user_data:
            await update.message.reply_text("❌ المستخدم غير موجود")
            return

        balance, full_name, username = user_data

        # إرسال طلب السحب للقناة مع الأزرار
        keyboard = [
            [InlineKeyboardButton("🔄 جاري المعالجة", callback_data=f"processing_withdrawal:{user_id}:{amount}")],
            [InlineKeyboardButton("✅ تم التحويل", callback_data=f"confirm_withdrawal:{user_id}:{amount}")],
            [InlineKeyboardButton("❌ رفض الطلب", callback_data=f"reject_withdrawal:{user_id}")],
            [InlineKeyboardButton("📩 إرسال رسالة", callback_data=f"message_user:{user_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"🔄 طلب سحب جديد:\n\n"
                 f"👤 الاسم: {full_name or 'غير معروف'}\n"
                 f"🔗 @{username or 'بدون'}\n"
                 f"🆔 ID: {user_id}\n"
                 f"💰 المبلغ: {amount}\n"
                 f"💳 الرصيد: {balance}\n"
                 f"🔗 المحفظة: {wallet_address}\n\n"
                 f"⏰ {update.message.date}",
            reply_markup=reply_markup
        )

        # تأكيد للمستخدم
        await update.message.reply_text(
            f"✅ تم استلام طلب السحب!\n\n"
            f"💳 المحفظة: {wallet_address}\n"
            f"💰 المبلغ: {amount}\n\n"
            f"🔄 جاري معالجة طلبك..."
        )

        # مسح البيانات المؤقتة
        for key in ['awaiting_withdrawal_wallet', 'withdrawal_user_id', 'withdrawal_amount']:
            context.user_data.pop(key, None)

    except Exception as e:
        logger.error(f"خطأ في معالجة محفظة السحب: {e}")
        await update.message.reply_text("❌ حدث خطأ في معالجة الطلب")
async def handle_wallet_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة عنوان المحفظة (معدل)"""
    try:
        user_id = update.effective_user.id
        wallet_address = update.message.text.strip()

        # تحقق بسيط فقط (أي نص بطول معقول مقبول)
        if len(wallet_address) < 10:
            await update.message.reply_text("❌ عنوان المحفظة قصير جداً")
            return

        # حفظ في قاعدة البيانات
        conn = sqlite3.connect('trading_bot.db')
        c = conn.cursor()
        c.execute(
            'UPDATE users SET wallet_address = ? WHERE user_id = ?',
            (wallet_address, user_id)
        )
        conn.commit()
        conn.close()

        # مسح حالة الانتظار
        del context.user_data['awaiting_wallet']

        await update.message.reply_text(
            f"✅ تم حفظ عنوان محفظتك!\n\n"
            f"📍 {wallet_address}\n\n"
            "الآن يمكنك استخدام /withdraw للسحب"
        )

    except Exception as e:
        logger.error(f"خطأ في حفظ المحفظة: {e}")
        await update.message.reply_text("❌ حدث خطأ في حفظ المحفظة")

# ==================== نظام إدارة المحافظ ====================
async def admin_wallets(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """إدارة محافظ الاستلام"""
    try:
        query = update.callback_query
        await query.answer()

        wallet_text = (
            f"💳 إدارة المحافظ\n\n"
            f"📍 المحفظة النشطة:\n"
            f"`{WALLET_ADDRESS}`\n\n"
            f"🌐 الشبكة: TRC20\n"
            f"⏰ آخر تحديث: {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        )

        keyboard = [
            [InlineKeyboardButton("✏️ تغيير العنوان", callback_data="change_wallet")],
            [InlineKeyboardButton("🔙 رجوع", callback_data="back_to_admin")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(wallet_text, reply_markup=reply_markup, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"❌ خطأ في إدارة المحافظ: {e}")
        await send_error_notification(f"خطأ في إدارة المحافظ: {e}")
