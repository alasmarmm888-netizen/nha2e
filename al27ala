import os
import asyncio
import logging
import sqlite3
import time
from datetime import datetime, date
from threading import Thread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.error import TelegramError

# 🔧 إعدادات التسجيل
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
# أضف هذا السطر ⬇️
logger = logging.getLogger(__name__)

# 🔐 المتغيرات الثابتة مباشرة
MAIN_BOT_TOKEN = "7566859808:AAFHlYo7nVIGDe6jnYIiI1EfsU-HeCntH5E"
ARCHIVE_CHANNEL = "-1003178411340"
ERROR_CHANNEL = "-1003091305351"
WALLET_ADDRESS = "TYy5CnBE3k..."
ADMIN_CHAT_ID = "-1003178411340"
CHANNEL_USERNAME = "@hotpum"
# 📊 خطط الاشتراك المحدثة مع نظام الترقي
SUBSCRIPTION_PLANS = {
    "bronze": {
        "name": "الخطة البرونزية",
        "price": 100,
        "days": 3,
        "profits": "10% – 20%",
        "level": 1
    },
    "silver": {
        "name": "الخطة الفضية",
        "price": 500,
        "days": 3,
        "profits": "15% – 25%",
        "level": 2
    },
    "gold": {
        "name": "الخطة الذهبية",
        "price": 1000,
        "days": 7,
        "profits": "20% – 35%",
        "level": 3
    },
    "platinum": {
        "name": "الخطة البلاتينية",
        "price": 5000,
        "days": 15,
        "profits": "35% – 50%",
        "level": 4
    },
    "diamond": {
        "name": "الخطة الماسية",
        "price": 10000,
        "days": 30,
        "profits": "50% – 80%",
        "level": 5
    },
    "royal": {
        "name": "الخطة الملكية 👑",
        "price": 20000,
        "days": 30,
        "profits": "حتى 100%",
        "features": "متابعة خاصة من كبار الخبراء + تقارير دقيقة",
        "level": 6
    },
    "legendary": {
        "name": "الخطة الأسطورية 🏆",
        "price": 50000,
        "days": 30,
        "profits": "120% – 150%",
        "level": 7
    }
}
# ==================== تهيئة قاعدة البيانات ====================
def init_database():
    """تهيئة قاعدة البيانات والجداول"""
    try:
        conn = sqlite3.connect('trading_bot.db', check_same_thread=False)
        c = conn.cursor()

        # جدول المستخدمين (محدث)
        c.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                full_name TEXT,
                phone TEXT,
                country TEXT,
                balance REAL DEFAULT 0.0,
                wallet_address TEXT,
                referral_code TEXT UNIQUE,
                referred_by INTEGER,
                subscription_level TEXT DEFAULT 'basic',
                registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_active INTEGER DEFAULT 1
            )
        ''')

        # جدول المعاملات
        c.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                type TEXT,
                amount REAL,
                status TEXT,
                description TEXT,
                transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')

        # جدول الإحالات
        c.execute('''
            CREATE TABLE IF NOT EXISTS referrals (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                referrer_id INTEGER,
                referred_id INTEGER,
                commission_earned REAL DEFAULT 0,
                referral_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (referrer_id) REFERENCES users (user_id),
                FOREIGN KEY (referred_id) REFERENCES users (user_id)
            )
        ''')
        # جدول المراسلة المؤقتة
        c.execute('''
            CREATE TABLE IF NOT EXISTS admin_messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id TEXT,
                target_user_id INTEGER,
                message_type TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()
        conn.close()
        logger.info("✅ قاعدة البيانات مهيأة بنجاح مع جميع الأعمدة")
    except Exception as e:
        logger.error(f"❌ خطأ في تهيئة قاعدة البيانات: {e}")

# تأكد من تشغيل init_database عند البدء
init_database()
# ==================== دوال قاعدة البيانات ====================
def get_user_data(user_id):
    """جلب بيانات المستخدم ك dictionary"""
    try:
        conn = sqlite3.connect('trading_bot.db', check_same_thread=False)
        c = conn.cursor()
        c.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        user = c.fetchone()
        conn.close()

        if user:
            # تحويل إلى dictionary
            columns = ['user_id', 'username', 'full_name', 'phone', 'country',
                      'balance', 'wallet_address', 'referral_code', 'referred_by',
                      'subscription_level', 'registration_date', 'last_activity', 'is_active']
            return dict(zip(columns, user))
        return None
    except Exception as e:
        logger.error(f"❌ خطأ في جلب بيانات المستخدم: {e}")
        return None

def register_user(user_id, full_name, phone, country, referral_code=None):
    """تسجيل مستخدم جديد"""
    try:
        conn = sqlite3.connect('trading_bot.db', check_same_thread=False)
        c = conn.cursor()

        # إنشاء كود إحالة فريد
        user_referral_code = f"REF{user_id}{datetime.now().strftime('%H%M')}"

        # البحث عن المحيل إذا كان هناك كود إحالة
        referred_by = None
        if referral_code:
            c.execute("SELECT user_id FROM users WHERE referral_code = ?", (referral_code,))
            referrer = c.fetchone()
            if referrer:
                referred_by = referrer[0]

        c.execute('''INSERT OR REPLACE INTO users
                     (user_id, full_name, phone, country, referral_code, referred_by, registration_date)
                     VALUES (?, ?, ?, ?, ?, ?, ?)''',
                  (user_id, full_name, phone, country, user_referral_code, referred_by, date.today()))

        conn.commit()
        conn.close()

        # إرسال إشعار للمحيل إذا وجد
        if referred_by:
            asyncio.create_task(notify_referral_signup(referred_by, user_id, full_name))

        return user_referral_code
    except Exception as e:
        logger.error(f"❌ خطأ في تسجيل المستخدم: {e}")
        return None

def update_user_balance(user_id, amount):
    """تحديد رصيد المستخدم"""
    try:
        conn = sqlite3.connect('trading_bot.db', check_same_thread=False)
        c = conn.cursor()
        c.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"❌ خطأ في تحديث الرصيد: {e}")
        return False

def add_transaction(user_id, transaction_type, amount, status="pending"):
    """إضافة معاملة جديدة"""
    try:
        conn = sqlite3.connect('trading_bot.db', check_same_thread=False)
        c = conn.cursor()
        c.execute('''INSERT INTO transactions
                     (user_id, type, amount, status, transaction_date)
                     VALUES (?, ?, ?, ?, ?)''',
                  (user_id, transaction_type, amount, status, datetime.now()))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"❌ خطأ في إضافة المعاملة: {e}")
        return False
# ==================== دوال الإشعارات ====================
async def send_admin_notification(message):
    """إرسال إشعار إداري إلى قناة الأخطاء (التي أصبحت قناة الإدارة أيضاً)"""
    try:
        await asyncio.sleep(1)

        app = Application.builder().token(MAIN_BOT_TOKEN).build()
        admin_text = f"👨‍💼 **إشعار إداري**\n\n{message}\n\n⏰ الوقت: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        await app.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_text
        )
    except Exception as e:
        logger.error(f"❌ فشل إرسال الإشعار الإداري: {e}")

async def send_error_notification(error_message):
    """إرسال إشعار خطأ إلى قناة الأخطاء"""
    try:

        await asyncio.sleep(1)

        app = Application.builder().token(MAIN_BOT_TOKEN).build()
        error_text = f"🚨 **تقرير خطأ**\n\n{error_message}\n\n⏰ الوقت: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        await app.bot.send_message(
            chat_id=ERROR_CHANNEL,
            text=error_text
        )
    except Exception as e:
        logger.error(f"❌ فشل إرسال تقرير الخطأ: {e}")

async def send_to_archive(message):
    """إرسال رسالة إلى قناة الأرشيف"""
    try:
        app = Application.builder().token(MAIN_BOT_TOKEN).build()
        await app.bot.send_message(
            chat_id=ARCHIVE_CHANNEL,
            text=message
        )
    except Exception as e:
        logger.error(f"❌ فشل إرسال إلى الأرشيف: {e}")

async def notify_referral_signup(referrer_id, referred_id, referred_name):
    """إشعار المحيل بتسجيل محال جديد"""
    try:
        message = f"🎉 لديك محال جديد!\n👤 الاسم: {referred_name}\n🆔 الأيدي: {referred_id}"
        await send_admin_notification(message)
    except Exception as e:
        logger.error(f"❌ خطأ في إشعار الإحالة: {e}")

# ==================== دوال الإحالة ====================
def add_referral_commission(referrer_id, referred_id, amount):
    """إضافة عمولة الإحالة"""
    try:
        commission = amount * 0.10  # 10% عمولة
        conn = sqlite3.connect('trading_bot.db', check_same_thread=False)
        c = conn.cursor()

        # تحديث رصيد المحيل
        c.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (commission, referrer_id))

        # تسجيل العملية
        c.execute('''INSERT INTO referrals
                     (referrer_id, referred_id, commission_earned, referral_date)
                     VALUES (?, ?, ?, ?)''',
                  (referrer_id, referred_id, commission, date.today()))

        conn.commit()
        conn.close()

        return commission
    except Exception as e:
        logger.error(f"❌ خطأ في إضافة عمولة الإحالة: {e}")
        return 0
async def handle_withdraw_bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة سحب المكافآت - النظام الجديد"""
    try:
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        user_data = get_user_data(user_id)

        # تحقق آمن من الرصيد
        try:
            balance = float(user_data['balance']) if user_data and user_data['balance'] is not None else 0.0
        except (ValueError, TypeError):
            balance = 0.0

        # طلب إدخال المبلغ يدوياً
        context.user_data['awaiting_amount'] = True
        context.user_data['withdraw_type'] = 'bonus'

        await query.edit_message_text(
            f"🎁 سحب المكافآت\n\n"
            f"💰 رصيدك الحالي: {balance:.2f} USDT\n"
            f"⏰ مدة المعالجة: 48 ساعة\n\n"
            f"📊 الرجاء إدخال المبلغ المراد سحبه:\n"
            f"(الحد الأقصى: {balance:.2f} USDT)",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("🔙 رجوع", callback_data="withdraw_menu")]
            ])
        )

    except Exception as e:
        logger.error(f"❌ خطأ في سحب المكافآت: {e}")
        await send_error_notification(f"خطأ في سحب المكافآت: {e}")
def init_referral_system():
    """تهيئة نظام الإحالة"""
    conn = sqlite3.connect('trading_bot.db')
    c = conn.cursor()

    # إنشاء جدول referrals إذا غير موجود
    c.execute('''
        CREATE TABLE IF NOT EXISTS referrals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            referrer_id INTEGER,
            referred_id INTEGER,
            commission_earned DECIMAL(10,2) DEFAULT 0,
            referral_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    # إضافة حقل referral_code لجدول users إذا غير موجود
    try:
        c.execute("ALTER TABLE users ADD COLUMN referral_code TEXT")
        print("✅ تم إضافة حقل referral_code")
    except sqlite3.OperationalError:
        pass  # الحقل موجود مسبقاً

    conn.commit()
    conn.close()
    print("✅ نظام الإحالة مهيأ")

def get_referral_stats(user_id):
    """جلب إحصائيات الإحالة"""
    try:
        conn = sqlite3.connect('trading_bot.db')
        c = conn.cursor()

        c.execute("SELECT COUNT(*) FROM referrals WHERE referrer_id = ?", (user_id,))
        referral_count = c.fetchone()[0]

        c.execute("SELECT SUM(commission_earned) FROM referrals WHERE referrer_id = ?", (user_id,))
        result = c.fetchone()[0]
        total_commissions = result if result is not None else 0

        conn.close()
        return referral_count, total_commissions

    except Exception as e:
        print(f"❌ خطأ في جلب إحصائيات الإحالة: {e}")
        return 0, 0

async def show_referral_system(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """عرض نظام الإحالة"""
    try:
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        referral_code = f"REF{user_id}"

        # ⬇️ أولاً جرب هذا الرابط البسيط
        bot_username = "Arba7Saudi_bot"  # غير هذا لاسم بوتك الصحيح
        referral_link = f"https://t.me/{bot_username}?start={referral_code}"

        # عرض الرابط للمستخدم للتأكد
        referral_text = f"""🎁 <b>نظام الدعوة والتوصية</b>

💼 <b>كود دعوتك:</b> <code>{referral_code}</code>

🔗 <b>رابط الدعوة:</b>
<code>{referral_link}</code>

📣 <b>كيف تستخدم:</b>
1. انسخ الرابط أعلاه 📋
2. أرسله لأصدقائك 📤
3.عندما ينضم صديق، ستحصل على عمولة 10% من ايداعه 💰"""
        keyboard = [
            [InlineKeyboardButton("📋 نسخ الرابط", callback_data="copy_referral_link")],
            [InlineKeyboardButton("🔙 رجوع", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            referral_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

    except Exception as e:
        print(f"❌ خطأ في عرض نظام الإحالة: {e}")
