
import os
import asyncio
import logging
import sqlite3
import time
from datetime import datetime, date
from threading import Thread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.error import TelegramError

# 🔧 إعدادات التسجيل
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
# أضف هذا السطر ⬇️
logger = logging.getLogger(__name__)

# 🔐 المتغيرات الثابتة مباشرة
MAIN_BOT_TOKEN = "7566859808:AAFHlYo7nVIGDe6jnYIiI1EfsU-HeCntH5E"
ARCHIVE_CHANNEL = "-1003178411340"
ERROR_CHANNEL = "-1003091305351"
WALLET_ADDRESS = "TYy5CnBE3k..."
ADMIN_CHAT_ID = "-1003178411340"
CHANNEL_USERNAME = "@hotpum"
# 📊 خطط الاشتراك المحدثة مع نظام الترقي
SUBSCRIPTION_PLANS = {
    "bronze": {
        "name": "الخطة البرونزية",
        "price": 100,
        "days": 3,
        "profits": "10% – 20%",
        "level": 1
    },
    "silver": {
        "name": "الخطة الفضية",
        "price": 500,
        "days": 3,
        "profits": "15% – 25%",
        "level": 2
    },
    "gold": {
        "name": "الخطة الذهبية",
        "price": 1000,
        "days": 7,
        "profits": "20% – 35%",
        "level": 3
    },
    "platinum": {
        "name": "الخطة البلاتينية",
        "price": 5000,
        "days": 15,
        "profits": "35% – 50%",
        "level": 4
    },
    "diamond": {
        "name": "الخطة الماسية",
        "price": 10000,
        "days": 30,
        "profits": "50% – 80%",
        "level": 5
    },
    "royal": {
        "name": "الخطة الملكية 👑",
        "price": 20000,
        "days": 30,
        "profits": "حتى 100%",
        "features": "متابعة خاصة من كبار الخبراء + تقارير دقيقة",
        "level": 6
    },
    "legendary": {
        "name": "الخطة الأسطورية 🏆",
        "price": 50000,
        "days": 30,
        "profits": "120% – 150%",
        "level": 7
    }
}
# ==================== تهيئة قاعدة البيانات ====================
def init_database():
    """تهيئة قاعدة البيانات والجداول"""
    try:
        conn = sqlite3.connect('trading_bot.db', check_same_thread=False)
        c = conn.cursor()

        # جدول المستخدمين (محدث)
        c.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                full_name TEXT,
                phone TEXT,
                country TEXT,
                balance REAL DEFAULT 0.0,
                wallet_address TEXT,
                referral_code TEXT UNIQUE,
                referred_by INTEGER,
                subscription_level TEXT DEFAULT 'basic',
                registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_active INTEGER DEFAULT 1
            )
        ''')

        # جدول المعاملات
        c.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                type TEXT,
                amount REAL,
                status TEXT,
                description TEXT,
                transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')

        # جدول الإحالات
        c.execute('''
            CREATE TABLE IF NOT EXISTS referrals (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                referrer_id INTEGER,
                referred_id INTEGER,
                commission_earned REAL DEFAULT 0,
                referral_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (referrer_id) REFERENCES users (user_id),
                FOREIGN KEY (referred_id) REFERENCES users (user_id)
            )
        ''')
        # جدول المراسلة المؤقتة
        c.execute('''
            CREATE TABLE IF NOT EXISTS admin_messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id TEXT,
                target_user_id INTEGER,
                message_type TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()
        conn.close()
        logger.info("✅ قاعدة البيانات مهيأة بنجاح مع جميع الأعمدة")
    except Exception as e:
        logger.error(f"❌ خطأ في تهيئة قاعدة البيانات: {e}")

# تأكد من تشغيل init_database عند البدء
init_database()
# ==================== دوال قاعدة البيانات ====================
def get_user_data(user_id):
    """جلب بيانات المستخدم ك dictionary"""
    try:
        conn = sqlite3.connect('trading_bot.db', check_same_thread=False)
        c = conn.cursor()
        c.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        user = c.fetchone()
        conn.close()

        if user:
            # تحويل إلى dictionary
            columns = ['user_id', 'username', 'full_name', 'phone', 'country',
                      'balance', 'wallet_address', 'referral_code', 'referred_by',
                      'subscription_level', 'registration_date', 'last_activity', 'is_active']
            return dict(zip(columns, user))
        return None
    except Exception as e:
        logger.error(f"❌ خطأ في جلب بيانات المستخدم: {e}")
        return None

def register_user(user_id, full_name, phone, country, referral_code=None):
    """تسجيل مستخدم جديد"""
    try:
        conn = sqlite3.connect('trading_bot.db', check_same_thread=False)
        c = conn.cursor()

        # إنشاء كود إحالة فريد
        user_referral_code = f"REF{user_id}{datetime.now().strftime('%H%M')}"

        # البحث عن المحيل إذا كان هناك كود إحالة
        referred_by = None
        if referral_code:
            c.execute("SELECT user_id FROM users WHERE referral_code = ?", (referral_code,))
            referrer = c.fetchone()
            if referrer:
                referred_by = referrer[0]

        c.execute('''INSERT OR REPLACE INTO users
                     (user_id, full_name, phone, country, referral_code, referred_by, registration_date)
                     VALUES (?, ?, ?, ?, ?, ?, ?)''',
                  (user_id, full_name, phone, country, user_referral_code, referred_by, date.today()))

        conn.commit()
        conn.close()

        # إرسال إشعار للمحيل إذا وجد
        if referred_by:
            asyncio.create_task(notify_referral_signup(referred_by, user_id, full_name))

        return user_referral_code
    except Exception as e:
        logger.error(f"❌ خطأ في تسجيل المستخدم: {e}")
        return None

def update_user_balance(user_id, amount):
    """تحديد رصيد المستخدم"""
    try:
        conn = sqlite3.connect('trading_bot.db', check_same_thread=False)
        c = conn.cursor()
        c.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"❌ خطأ في تحديث الرصيد: {e}")
        return False

def add_transaction(user_id, transaction_type, amount, status="pending"):
    """إضافة معاملة جديدة"""
    try:
        conn = sqlite3.connect('trading_bot.db', check_same_thread=False)
        c = conn.cursor()
        c.execute('''INSERT INTO transactions
                     (user_id, type, amount, status, transaction_date)
                     VALUES (?, ?, ?, ?, ?)''',
                  (user_id, transaction_type, amount, status, datetime.now()))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"❌ خطأ في إضافة المعاملة: {e}")
        return False

# ==================== دوال الإشعارات ====================
async def send_admin_notification(message):
    """إرسال إشعار إداري إلى قناة الأخطاء (التي أصبحت قناة الإدارة أيضاً)"""
    try:
        await asyncio.sleep(1)

        app = Application.builder().token(MAIN_BOT_TOKEN).build()
        admin_text = f"👨‍💼 **إشعار إداري**\n\n{message}\n\n⏰ الوقت: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        await app.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_text
        )
    except Exception as e:
        logger.error(f"❌ فشل إرسال الإشعار الإداري: {e}")

async def send_error_notification(error_message):
    """إرسال إشعار خطأ إلى قناة الأخطاء"""
    try:

        await asyncio.sleep(1)

        app = Application.builder().token(MAIN_BOT_TOKEN).build()
        error_text = f"🚨 **تقرير خطأ**\n\n{error_message}\n\n⏰ الوقت: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        await app.bot.send_message(
            chat_id=ERROR_CHANNEL,
            text=error_text
        )
    except Exception as e:
        logger.error(f"❌ فشل إرسال تقرير الخطأ: {e}")

async def send_to_archive(message):
    """إرسال رسالة إلى قناة الأرشيف"""
    try:
        app = Application.builder().token(MAIN_BOT_TOKEN).build()
        await app.bot.send_message(
            chat_id=ARCHIVE_CHANNEL,
            text=message
        )
    except Exception as e:
        logger.error(f"❌ فشل إرسال إلى الأرشيف: {e}")

async def notify_referral_signup(referrer_id, referred_id, referred_name):
    """إشعار المحيل بتسجيل محال جديد"""
    try:
        message = f"🎉 لديك محال جديد!\n👤 الاسم: {referred_name}\n🆔 الأيدي: {referred_id}"
        await send_admin_notification(message)
    except Exception as e:
        logger.error(f"❌ خطأ في إشعار الإحالة: {e}")

# ==================== دوال الإحالة ====================
def add_referral_commission(referrer_id, referred_id, amount):
    """إضافة عمولة الإحالة"""
    try:
        commission = amount * 0.10  # 10% عمولة
        conn = sqlite3.connect('trading_bot.db', check_same_thread=False)
        c = conn.cursor()

        # تحديث رصيد المحيل
        c.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (commission, referrer_id))

        # تسجيل العملية
        c.execute('''INSERT INTO referrals
                     (referrer_id, referred_id, commission_earned, referral_date)
                     VALUES (?, ?, ?, ?)''',
                  (referrer_id, referred_id, commission, date.today()))

        conn.commit()
        conn.close()

        return commission
    except Exception as e:
        logger.error(f"❌ خطأ في إضافة عمولة الإحالة: {e}")
        return 0

# ==================== البوت الرئيسي - Start ====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """بدء البوت الرئيسي"""
    try:
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name

        # ⬇️⬇️⬇️ التحقق إذا المستخدم مسجل من قبل ⬇️⬇️⬇️
        user_data = get_user_data(user_id)
        if user_data:
            # إذا مسجل، اعرض القائمة الرئيسية مباشرة
            await show_main_menu(update, context, user_id)
            return
        # ⬆️⬆️⬆️ نهاية الإضافة ⬆️⬆️⬆️

        # الرسالة الترحيبية المحدثة - تنسيق احترافي
        welcome_text = """
<b>🏆 مرحباً بك في بوت MAF للتداول الذكي</b>

<code>━━━━━━━━━━━━━━━━━━━━━━━━</code>

<b>✨ لماذا نحن الأفضل في السوق؟</b>

<code>▫️ 🤖 أول بوت يعمل بالذكاء الاصطناعي</code>
<code>▫️ 💰 أرباح تصل إلى 150% شهرياً</code>
<code>▫️ ⚡ تنفيذ صفقات فوري وآمن</code>
<code>▫️ 🛡️ حماية كاملة لاستثمارك</code>
<code>▫️ 📊 تحليلات حية 24/7</code>

<code>━━━━━━━━━━━━━━━━━━━━━━━━</code>

<b>🎯 أرقامنا تتحدث عن نفسها:</b>
• <b>+5,000</b> مستخدم نشط
• <b>+$2M</b> أرباح مجمعة
• <b>98%</b> نسبة نجاح الصفقات

<code>━━━━━━━━━━━━━━━━━━━━━━━━</code>

<b>💎 انضم إلى النخبة وابدأ رحلتك نحو:</b>
• ✅ <b>الاستقلال المالي</b>
• ✅ <b>تحقيق دخل ثابت</b>
• ✅ <b>بناء مستقبل آمن</b>

<code>━━━━━━━━━━━━━━━━━━━━━━━━</code>

<b>🚀 لن تكون نفس الشخص بعد اليوم!</b>
<i>ابدأ الآن وشاهد تحول حياتك المالية</i>
        """

        # إرسال الصورة مع النص المنسق
        photo_url = 'https://up6.cc/2025/10/17609823650161.png'

        await update.message.reply_photo(
            photo=photo_url,
            caption=welcome_text,
            parse_mode='HTML'
        )

        # طلب الاشتراك في القناة
        keyboard = [
            [InlineKeyboardButton("📢 انضم للقناة أولاً", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
            [InlineKeyboardButton("✅ تحقق من الاشتراك", callback_data="check_subscription")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "🔐 <b>الوصول الحصري يشترط الاشتراك في قناتنا</b>\n\n"
            "📢 <i>انضم الآن لتفعيل حسابك والحصول على:</i>\n"
            "• 📈 إشعارات الصفقات الحية\n"
            "• 💡 استراتيجيات حصرية\n"
            "• 🎁 عروض خاصة للأعضاء\n\n"
            "➡️ <b>بعد الانضمام، اضغط على زر التحقق</b>",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

        # حفظ بيانات المستخدم
        context.user_data['pending_user_id'] = user_id
        if context.args and context.args[0].startswith('REF'):
            context.user_data['pending_referral'] = context.args[0]

    except Exception as e:
        logger.error(f"❌ خطأ في أمر start: {e}")
        await send_error_notification(f"خطأ في أمر start: {e}")
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int = None) -> None:
    """عرض القائمة الرئيسية"""
    try:
        # إذا لم يتم تمرير user_id، نأخذه من update
        if user_id is None:
            user_id = update.effective_user.id

        user_data = get_user_data(user_id)

        if not user_data:
            await update.message.reply_text("❌ لم يتم العثور على بيانات المستخدم. يرجى إعادة التسجيل.")
            return

        balance = user_data['balance'] if user_data else 0.0

        # 🔥 الجديد: جلب إحصائيات الإحالة
        referral_count, total_commissions = get_referral_stats(user_id)

        keyboard = [
            [InlineKeyboardButton("💼 خطط الاشتراك", callback_data="subscription_plans")],
            [InlineKeyboardButton("💰 رصيدي", callback_data="check_balance")],
            [InlineKeyboardButton("🎁 ادعو أصدقائك", callback_data="referral_system")],
            [InlineKeyboardButton("💳 سحب الأرباح", callback_data="withdraw_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # 🔥 الجديد: نص القائمة مع إحصائيات الإحالة
        menu_text = (
            f"مرحباً بعودتك! 👋\n"
            f"💼 محفظتك: {balance:.2f} USDT\n"
            f"👥 أحالتك: {referral_count} شخص\n"
            f"🎁 عمولاتك: {total_commissions:.2f} USDT\n\n"
            f"اختر من القائمة:"
        )

        # تحديد نوع الرسالة (message أو callback_query)
        if update.callback_query:
            await update.callback_query.edit_message_text(
                menu_text,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                menu_text,
                reply_markup=reply_markup
            )

    except Exception as e:
        logger.error(f"❌ خطأ في عرض القائمة الرئيسية: {e}")
        # محاولة إرسال رسالة خطأ بديلة
        try:
            if update.message:
                await update.message.reply_text("❌ حدث خطأ في تحميل القائمة الرئيسية. يرجى المحاولة مرة أخرى.")
        except:
            pass
        await send_error_notification(f"خطأ في عرض القائمة الرئيسية: {e}")
# ==================== نظام المراسلة ====================

# ==================== معالجة تسجيل البيانات ====================
async def handle_user_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة رسائل المستخدمين"""
    if not update.effective_user:
        return
    try:
        user_id = update.effective_user.id
        message_text = update.message.text
        print(f"🎯 handle_user_registration CALLED - User: {user_id}")
        print(f"🎯 Message: {message_text}")
        print(f"🎯 awaiting_registration: {context.user_data.get(f'awaiting_registration_{user_id}')}")
        # إذا كان بانتظار المحفظة - معالجتها أولاً والخروج
        if context.user_data.get('awaiting_wallet'):
            print("🔔 Processing wallet address")
            await handle_wallet_address(update, context)
            return

        # إذا كان بانتظار التسجيل
        if context.user_data.get(f'awaiting_registration_{user_id}'):
            print("🔔 Processing registration data")
            lines = message_text.strip().split('\n')
            if len(lines) >= 3:
                name = lines[0].strip()
                phone = lines[1].strip()
                country = lines[2].strip()

                # حفظ في قاعدة البيانات
                conn = sqlite3.connect('trading_bot.db')
                c = conn.cursor()
                c.execute('''
                    INSERT OR REPLACE INTO users
                    (user_id, username, full_name, phone, country, balance, registration_date)
                    VALUES (?, ?, ?, ?, ?, 0, datetime('now'))
                ''', (user_id, update.effective_user.username, name, phone, country))
                conn.commit()
                conn.close()

                # مسح حالة الانتظار
                del context.user_data[f'awaiting_registration_{user_id}']

                await update.message.reply_text(
                    f"✅ تم تسجيلك بنجاح!\n\n"
                    f"👤 الاسم: {name}\n"
                    f"📞 الهاتف: {phone}\n"
                    f"🌍 البلد: {country}\n\n"
                    f"🚀 الآن يمكنك استخدام البوت بشكل كامل!"
                )
                await show_main_menu(update, context, user_id)
                # إشعار الأدمن مع الربط بالقناة
                await send_admin_notification(
                    f"👤 تسجيل جديد:\n"
                    f"الاسم: {name}\n"
                    f"الهاتف: {phone}\n"
                    f"البلد: {country}\n"
                    f"ID: {user_id}\n"
                    f"@{update.effective_user.username or 'بدون'}"
                )
            else:
                await update.message.reply_text(
                    "❌ يرجى إرسال البيانات بالصيغة الصحيحة:\n\n"
                    "الاسم الثلاثي\nرقم الهاتف\nالبلد\n\n"
                    "مثال:\nمحمد أحمد علي\n966512345678\nالسعودية"
                )
            return

        # إذا لا يوجد حالة انتظار - تحويل الرسالة للإدارة
        await forward_user_messages(update, context)

    except Exception as e:
        logger.error(f"خطأ في التسجيل: {e}")
        try:
            await forward_user_messages(update, context)
        except Exception as e2:
            logger.error(f"خطأ في التحويل: {e2}")
# ==================== عرض خطط الاشتراك ====================
async def show_subscription_plans(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """عرض جميع خطط الاشتراك - مع نظام الترقي"""
    try:
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        user_data = get_user_data(user_id)
        current_plan = user_data.get('subscription_level') if user_data else None

        keyboard = []
        for plan_id, plan in SUBSCRIPTION_PLANS.items():
            plan_text = f"{plan['name']} - {plan['price']} USDT"

            # إذا كانت هذه خطته الحالية
            if current_plan == plan_id:
                plan_text = f"✅ {plan_text} (خطتك الحالية)"
            # إذا كانت خطة أدنى من خطته
            elif current_plan and plan['level'] <= SUBSCRIPTION_PLANS.get(current_plan, {}).get('level', 0):
                plan_text = f"❌ {plan_text} (غير متاح)"

            keyboard.append([
                InlineKeyboardButton(plan_text, callback_data=f"subscribe_{plan_id}")
            ])

        keyboard.append([InlineKeyboardButton("🔙 رجوع", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        plans_text = "💼 خطط الاشتراك المتاحة:\n\n"
        if current_plan and current_plan != 'basic':
            current_plan_name = SUBSCRIPTION_PLANS.get(current_plan, {}).get('name', 'غير معروفة')
            plans_text += f"📋 خطتك الحالية: {current_plan_name}\n\n"

        for plan_id, plan in SUBSCRIPTION_PLANS.items():
            plans_text += f"🔹 {plan['name']}\n"
            plans_text += f"💰 السعر: {plan['price']} USDT\n"
            plans_text += f"⏳ المدة: {plan['days']} يوم\n"
            plans_text += f"📈 الأرباح المتوقعة: {plan['profits']}\n"
            if 'features' in plan:
                plans_text += f"⭐ {plan['features']}\n"

            # إضافة إشارة إذا كانت الخطة غير متاحة
            if current_plan and plan['level'] <= SUBSCRIPTION_PLANS.get(current_plan, {}).get('level', 0):
                plans_text += f"🚫 غير متاح للترقية\n"

            plans_text += "\n"

        await query.edit_message_text(plans_text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"❌ خطأ في عرض خطط الاشتراك: {e}")
        await send_error_notification(f"خطأ في عرض خطط الاشتراك: {e}")
# ==================== معالجة الاشتراك ====================
async def handle_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """معالجة طلب الاشتراك - مع نظام الترقي"""
    try:
        query = update.callback_query
        plan_id = query.data.split("_")[1]
        plan = SUBSCRIPTION_PLANS[plan_id]
        user_id = query.from_user.id

        await query.answer()

        # جلب بيانات المستخدم الحالية
        user_data = get_user_data(user_id)
        current_plan = user_data.get('subscription_level') if user_data else None

        # التحقق إذا المستخدم مشترك مسبقاً
        if current_plan and current_plan != 'basic':
            current_plan_level = SUBSCRIPTION_PLANS.get(current_plan, {}).get('level', 0)
            new_plan_level = plan['level']

            # إذا حاول يشترك بخطة أدنى أو مساوية لخطته الحالية
            if new_plan_level <= current_plan_level:
                current_plan_name = SUBSCRIPTION_PLANS.get(current_plan, {}).get('name', 'غير معروفة')
                await query.answer(f"❌ لديك خطة {current_plan_name} نشطة. يمكنك الترقية فقط!", show_alert=True)
                return

        # إذا كلشي تمام، تابع العملية العادية
        subscription_text = (
            f"🎉 تم اختيار خطتك بنجاح!\n\n"
            f"🔹 الخطة: {plan['name']}\n"
            f"💰 السعر: {plan['price']} USDT\n"
            f"⏳ المدة: {plan['days']} يوم\n"
            f"📊 الأرباح المتوقعة: {plan['profits']}\n"
        )

        if 'features' in plan:
            subscription_text += f"⭐ المميزات: {plan['features']}\n\n"
        else:
            subscription_text += "\n"

        # إضافة معلومات الترقي إذا كان هناك ترقية
        if current_plan and current_plan != 'basic':
            current_plan_name = SUBSCRIPTION_PLANS.get(current_plan, {}).get('name', 'غير معروفة')
            subscription_text += f"🔄 أنت تقوم بترقية اشتراكك من {current_plan_name}\n\n"

        subscription_text += (
            f"💡 للمتابعة يرجى إتمام عملية الدفع على العنوان التالي:\n"
            f"`{WALLET_ADDRESS}`\n\n"
            f"⚠️ ملاحظة:\n"
            f"• تأكد أن التحويل يتم باستخدام شبكة TRC20 فقط\n"
            f"• سيتم تفعيل اشتراكك خلال 15 دقيقة بعد التأكيد\n\n"
            f"بعد الدفع، اضغط على زر تأكيد الدفع وأرسل صورة التحويل"
        )

        keyboard = [
            [InlineKeyboardButton("📸 تأكيد الدفع وإرسال الإثبات", callback_data=f"confirm_payment_{plan_id}")],
            [InlineKeyboardButton("🔙 رجوع للخطط", callback_data="subscription_plans")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(subscription_text, reply_markup=reply_markup, parse_mode='Markdown')

        # إشعار الأدمن بطلب اشتراك
        user_name = user_data['full_name'] if user_data else query.from_user.first_name
        notification_type = "ترقية" if current_plan and current_plan != 'basic' else "جديد"
        current_plan_name = SUBSCRIPTION_PLANS.get(current_plan, {}).get('name', 'غير مشترك') if current_plan else 'غير مشترك'

        await send_admin_notification(
            f"🔄 طلب اشتراك {notification_type}\n"
            f"👤 المستخدم: {user_name}\n"
            f"🆔 الأيدي: {user_id}\n"
            f"📋 الخطة: {plan['name']}\n"
            f"💰 المبلغ: {plan['price']} USDT\n"
            f"📈 من خطة: {current_plan_name}"
        )
    except Exception as e:
        logger.error(f"❌ خطأ في معالجة الاشتراك: {e}")
        await send_error_notification(f"خطأ في معالجة الاشتراك: {e}")
# ==================== تأكيد الدفع ====================
async def confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """تأكيد إرسال إثبات الدفع"""
    try:
        query = update.callback_query
        plan_id = query.data.split("_")[2]
        plan = SUBSCRIPTION_PLANS[plan_id]

        await query.answer()
        await query.edit_message_text(
            f"📸 جاهز لاستلام إثبات الدفع للخطة {plan['name']}\n\n"
            f"💰 المبلغ: {plan['price']} USDT\n\n"
            f"يرجى إرسال صورة إشعار التحويل الآن\n\n"
            f"⚠️ تأكد من ظهور في الصورة:\n"
            f"• المبلغ المحول\n"
            f"• عنوان المحفظة المرسل إليها\n"
            f"• تاريخ ووقت التحويل"
        )

        context.user_data['awaiting_payment_proof'] = plan_id
    except Exception as e:
        logger.error(f"❌ خطأ في تأكيد الدفع: {e}")
        await send_error_notification(f"خطأ في تأكيد الدفع: {e}")

# ==================== معالجة صورة التحويل ====================
async def handle_payment_proof(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة صورة إثبات الدفع - معدل"""
    try:
        user_id = update.effective_user.id
        user_data = get_user_data(user_id)
        user_name = user_data['full_name'] if user_data else update.effective_user.first_name

        if 'awaiting_payment_proof' in context.user_data:
            plan_id = context.user_data['awaiting_payment_proof']
            plan = SUBSCRIPTION_PLANS[plan_id]

            await update.message.reply_text(
                "✅ تم استلام صورة الإثبات بنجاح!\n\n"
                "⏳ جاري مراجعة التحويل وتفعيل اشتراكك...\n"
                "سيصلك إشعار خلال 15 دقيقة كحد أقصى"
            )

            # ✅ إصلاح: استخدم context.bot بدل عمل Application جديد
            keyboard = [
                [InlineKeyboardButton("✅ تأكيد الاشتراك", callback_data=f"approve_sub_{user_id}_{plan_id}")],
                [InlineKeyboardButton("❌ رفض الاشتراك", callback_data=f"reject_sub_{user_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            caption = (
                f"📨 إشعار تحويل جديد\n"
                f"👤 من: {user_name}\n"
                f"🆔 الأيدي: {user_id}\n"
                f"📋 الخطة: {plan['name']}\n"
                f"💰 المبلغ: {plan['price']} USDT"
            )

            await context.bot.send_photo(
                chat_id=ADMIN_CHAT_ID,
                photo=update.message.photo[-1].file_id,
                caption=caption,
                reply_markup=reply_markup
            )

            del context.user_data['awaiting_payment_proof']

        else:
            await update.message.reply_text("❌ لم تطلب تأكيد دفع، يرجى اختيار خطة أولاً")
    except Exception as e:
        logger.error(f"❌ خطأ في معالجة صورة الدفع: {e}")
        await update.message.reply_text("❌ حدث خطأ في معالجة الصورة، يرجى المحاولة مرة أخرى")

# ==================== نظام السحب ====================
async def show_withdraw_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """عرض قائمة السحب"""
    try:
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        user_data = get_user_data(user_id)

        # 🔧 هذا السطر المعدل - تحقق آمن من الرصيد
        try:
            balance = float(user_data['balance']) if user_data and user_data['balance'] is not None else 0.0
        except (ValueError, TypeError):
            balance = 0.0

        keyboard = [
            [InlineKeyboardButton("💳 سحب الأرباح (24 ساعة)", callback_data="withdraw_profits")],
            [InlineKeyboardButton("🎁 سحب المكافآت (أسبوعي)", callback_data="withdraw_bonus")],
            [InlineKeyboardButton("🔙 رجوع", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"💳 نظام السحب\n\n"
            f"💰 رصيدك الحالي: {balance:.2f} USDT\n\n"
            f"📋 خيارات السحب:\n"
            f"• سحب الأرباح: كل 24 ساعة (25$ - 1000$)\n"
            f"• سحب المكافآت: كل أسبوع (لا حدود)\n\n"
            f"اختر نوع السحب:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"❌ خطأ في عرض قائمة السحب: {e}")
        await send_error_notification(f"خطأ في عرض قائمة السحب: {e}")

async def handle_withdraw_profits(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة سحب الأرباح - النظام الجديد"""
    try:
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        user_data = get_user_data(user_id)

        # تحقق آمن من الرصيد
        try:
            balance = float(user_data['balance']) if user_data and user_data['balance'] is not None else 0.0
        except (ValueError, TypeError):
            balance = 0.0

        # التحقق من الحد الأدنى
        if balance < 25:
            await query.edit_message_text(
                f"❌ لا يمكن السحب\n\n"
                f"💰 رصيدك الحالي: {balance:.2f} USDT\n"
                f"📊 الحد الأدنى للسحب: 25 USDT\n\n"
                f"💡 استمر في التداول لتجميع الأرباح!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("🔙 رجوع", callback_data="withdraw_menu")]
                ])
            )
            return

        # طلب إدخال المبلغ يدوياً
        context.user_data['awaiting_amount'] = True
        context.user_data['withdraw_type'] = 'profits'

        await query.edit_message_text(
            f"💳 سحب الأرباح\n\n"
            f"💰 رصيدك الحالي: {balance:.2f} USDT\n"
            f"⏰ مدة المعالجة: 24 ساعة\n\n"
            f"📊 الرجاء إدخال المبلغ المراد سحبه:\n"
            f"(الحد الأدنى: 25 USDT - الحد الأقصى: {balance:.2f} USDT)",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("🔙 رجوع", callback_data="withdraw_menu")]
            ])
        )

    except Exception as e:
        logger.error(f"❌ خطأ في سحب الأرباح: {e}")
        await send_error_notification(f"خطأ في سحب الأرباح: {e}")
async def handle_withdraw_bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة سحب المكافآت - النظام الجديد"""
    try:
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        user_data = get_user_data(user_id)

        # تحقق آمن من الرصيد
        try:
            balance = float(user_data['balance']) if user_data and user_data['balance'] is not None else 0.0
        except (ValueError, TypeError):
            balance = 0.0

        # طلب إدخال المبلغ يدوياً
        context.user_data['awaiting_amount'] = True
        context.user_data['withdraw_type'] = 'bonus'

        await query.edit_message_text(
            f"🎁 سحب المكافآت\n\n"
            f"💰 رصيدك الحالي: {balance:.2f} USDT\n"
            f"⏰ مدة المعالجة: 48 ساعة\n\n"
            f"📊 الرجاء إدخال المبلغ المراد سحبه:\n"
            f"(الحد الأقصى: {balance:.2f} USDT)",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("🔙 رجوع", callback_data="withdraw_menu")]
            ])
        )

    except Exception as e:
        logger.error(f"❌ خطأ في سحب المكافآت: {e}")
        await send_error_notification(f"خطأ في سحب المكافآت: {e}")
async def handle_withdraw_amount_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة المبلغ المدخل يدوياً"""
    try:
        user_id = update.effective_user.id
        amount_text = update.message.text.strip()

        # تحويل المبلغ إلى رقم
        try:
            amount = float(amount_text)
        except ValueError:
            await update.message.reply_text("❌ يرجى إدخال مبلغ صحيح (أرقام فقط)")
            return

        user_data = get_user_data(user_id)
        try:
            balance = float(user_data['balance']) if user_data and user_data['balance'] is not None else 0.0
        except (ValueError, TypeError):
            balance = 0.0

        # التحقق من الرصيد
        if amount > balance:
            await update.message.reply_text(f"❌ رصيدك غير كافي. رصيدك: {balance:.2f} USDT")
            return

        # التحقق من الحد الأدنى للأرباح
        withdraw_type = context.user_data.get('withdraw_type')
        if withdraw_type == 'profits' and amount < 25:
            await update.message.reply_text("❌ الحد الأدنى لسحب الأرباح هو 25 USDT")
            return

        # حفظ المبلغ وطلب المحفظة
        context.user_data['withdraw_amount'] = amount
        context.user_data['awaiting_wallet'] = True
        context.user_data['awaiting_amount'] = False  # نظف حالة الانتظار

        await update.message.reply_text(
            f"✅ تم استلام المبلغ: {amount} USDT\n\n"
            f"💳 الرجاء إرسال عنوان محفظتك USDT (TRC20):\n\n"
            f"📝 مثال:\n"
            f"TYy5CnBE3k6g5aNZhTNLX1WEnLk6fQ5Xz2"
        )

    except Exception as e:
        logger.error(f"❌ خطأ في معالجة المبلغ: {e}")
        await update.message.reply_text("❌ حدث خطأ في معالجة المبلغ")

async def handle_wallet_address_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة إدخال المحفظة وإرسال طلب السحب للإدارة"""
    try:
        user_id = update.effective_user.id
        wallet_address = update.message.text.strip()
        amount = context.user_data.get('withdraw_amount')
        withdraw_type = context.user_data.get('withdraw_type')

        if not amount:
            await update.message.reply_text("❌ جلسة منتهية، ابدأ طلب سحب جديد")
            return

        # تحقق بسيط من العنوان
        if len(wallet_address) < 10:
            await update.message.reply_text("❌ عنوان المحفظة قصير جداً")
            return

        user_data = get_user_data(user_id)
        if not user_data:
            await update.message.reply_text("❌ المستخدم غير موجود")
            return

        # إرسال طلب السحب للقناة مع الأزرار
        keyboard = [
            [InlineKeyboardButton("✅ تم التحويل", callback_data=f"confirm_withdrawal:{user_id}:{amount}")],
            [InlineKeyboardButton("❌ رفض السحب", callback_data=f"reject_withdrawal:{user_id}:{amount}")],
            [InlineKeyboardButton("📩 إرسال رسالة", callback_data=f"message_user:{user_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"🔄 طلب سحب جديد:\n\n"
                 f"👤 الاسم: {user_data['full_name'] or 'غير معروف'}\n"
                 f"🔗 @{update.effective_user.username or 'بدون'}\n"
                 f"🆔 ID: {user_id}\n"
                 f"💰 المبلغ: {amount} USDT\n"
                 f"📋 النوع: {'أرباح' if withdraw_type == 'profits' else 'مكافآت'}\n"
                 f"💳 الرصيد: {user_data['balance']}\n"
                 f"🔗 المحفظة: {wallet_address}\n\n"
                 f"⏰ {update.message.date}",
            reply_markup=reply_markup
        )

        # تأكيد للمستخدم
        await update.message.reply_text(
            f"✅ تم استلام طلب السحب!\n\n"
            f"💳 المحفظة: {wallet_address}\n"
            f"💰 المبلغ: {amount} USDT\n"
            f"📋 النوع: {'أرباح' if withdraw_type == 'profits' else 'مكافآت'}\n\n"
            f"🔄 جاري معالجة طلبك..."
        )

        # مسح البيانات المؤقتة
        for key in ['awaiting_amount', 'awaiting_wallet', 'withdraw_amount', 'withdraw_type']:
            context.user_data.pop(key, None)

    except Exception as e:
        logger.error(f"❌ خطأ في معالجة المحفظة: {e}")
        await update.message.reply_text("❌ حدث خطأ في معالجة الطلب")

# ==================== نظام الإدارة - أوامر الأدمن ====================


# ==================== إحصائيات الأدمن ====================
async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """عرض إحصائيات النظام"""
    try:
        query = update.callback_query
        await query.answer()

        conn = sqlite3.connect('trading_bot.db', check_same_thread=False)
        c = conn.cursor()

        # إحصائيات المستخدمين
        c.execute("SELECT COUNT(*) FROM users")
        total_users = c.fetchone()[0]

        c.execute("SELECT COUNT(*) FROM users WHERE subscription_level IS NOT NULL")
        subscribed_users = c.fetchone()[0]

        c.execute("SELECT COUNT(*) FROM users WHERE registration_date = ?", (date.today(),))
        new_today = c.fetchone()[0]

        # إحصائيات مالية
        c.execute("SELECT SUM(balance) FROM users")
        total_balance = c.fetchone()[0] or 0

        c.execute("SELECT SUM(amount) FROM transactions WHERE type = 'deposit' AND status = 'completed'")
        total_deposits = c.fetchone()[0] or 0

        c.execute("SELECT SUM(amount) FROM transactions WHERE type = 'withdrawal' AND status = 'completed'")
        total_withdrawals = c.fetchone()[0] or 0

        # إحصائيات الإحالة
        c.execute("SELECT COUNT(*) FROM referrals")
        total_referrals = c.fetchone()[0]

        c.execute("SELECT SUM(commission_earned) FROM referrals")
        total_commissions = c.fetchone()[0] or 0

        conn.close()

        stats_text = (
            f"📊 إحصائيات النظام - {datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n"
            f"👥 المستخدمين:\n"
            f"• الإجمالي: {total_users} مستخدم\n"
            f"• المشتركين: {subscribed_users} مستخدم\n"
            f"• جدد اليوم: {new_today} مستخدم\n\n"
            f"💰 المالية:\n"
            f"• إجمالي الرصيد: {total_balance:.2f} USDT\n"
            f"• إجمالي الإيداعات: {total_deposits:.2f} USDT\n"
            f"• إجمالي السحبات: {total_withdrawals:.2f} USDT\n\n"
            f"🎁 الإحالات:\n"
            f"• إجمالي الإحالات: {total_referrals}\n"
            f"• إجمالي العمولات: {total_commissions:.2f} USDT\n\n"
            f"🟢 الحالة: النظام يعمل بشكل طبيعي"
        )

        keyboard = [[InlineKeyboardButton("🔙 رجوع", callback_data="back_to_admin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(stats_text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"❌ خطأ في عرض إحصائيات الأدمن: {e}")
        await send_error_notification(f"خطأ في عرض إحصائيات الأدمن: {e}")

# ==================== إدارة المستخدمين ====================
async def admin_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """إدارة المستخدمين"""
    try:
        query = update.callback_query
        await query.answer()

        conn = sqlite3.connect('trading_bot.db', check_same_thread=False)
        c = conn.cursor()
        c.execute("SELECT user_id, full_name, balance, subscription_level FROM users ORDER BY registration_date DESC LIMIT 10")
        recent_users = c.fetchall()
        conn.close()

        users_text = "👥 آخر 10 مستخدمين:\n\n"
        for user in recent_users:
            user_id, full_name, balance, subscription = user
            sub_text = subscription if subscription else "غير مشترك"
            users_text += f"👤 {full_name}\n🆔 {user_id}\n💼 {balance:.2f}$\n📋 {sub_text}\n\n"

        keyboard = [
            [InlineKeyboardButton("🔍 بحث عن مستخدم", callback_data="admin_search_user")],
            [InlineKeyboardButton("📧 رسالة جماعية", callback_data="admin_broadcast")],
            [InlineKeyboardButton("🔙 رجوع", callback_data="back_to_admin")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(users_text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"❌ خطأ في إدارة المستخدمين: {e}")
        await send_error_notification(f"خطأ في إدارة المستخدمين: {e}")

# ==================== تأكيد الاشتراكات من الأدمن ====================
async def approve_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """تأكيد اشتراك من الأدمن"""
    try:
        query = update.callback_query
        data = query.data.split("_")
        user_id = int(data[2])
        plan_id = data[3]
        plan = SUBSCRIPTION_PLANS[plan_id]

        # تحديث حالة المستخدم
        conn = sqlite3.connect('trading_bot.db', check_same_thread=False)
        c = conn.cursor()
        c.execute("UPDATE users SET subscription_level = ?, balance = balance + ? WHERE user_id = ?",
                  (plan_id, plan['price'], user_id))

        # إضافة المعاملة
        c.execute("INSERT INTO transactions (user_id, type, amount, status, transaction_date) VALUES (?, ?, ?, ?, ?)",
                  (user_id, "deposit", plan['price'], "completed", datetime.now()))

        # 🔥 الجديد: إضافة عمولة الإحالة إذا كان هناك محيل
        c.execute("SELECT referred_by FROM users WHERE user_id = ?", (user_id,))
        result = c.fetchone()
        if result and result[0]:
            referrer_id = result[0]
            commission = plan['price'] * 0.10  # 10% عمولة
            # إضافة العمولة للمحيل
            c.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (commission, referrer_id))
            # تسجيل العملية في جدول referrals
            c.execute('''INSERT INTO referrals (referrer_id, referred_id, commission_earned, referral_date)
                         VALUES (?, ?, ?, ?)''', (referrer_id, user_id, commission, date.today()))
            # إضافة معاملة للمحيل
            c.execute('''INSERT INTO transactions (user_id, type, amount, status, transaction_date)
                         VALUES (?, ?, ?, ?, ?)''', (referrer_id, "referral_commission", commission, "completed", datetime.now()))

            # إشعار المحيل
            try:
                app = Application.builder().token(MAIN_BOT_TOKEN).build()
                await app.bot.send_message(
                    chat_id=referrer_id,
                    text=f"🎉 حصلت على عمولة إحالة!\n\n💰 المبلغ: {commission:.2f} USDT\n👤 من: المستخدم {user_id}\n📋 الخطة: {plan['name']}"
                )
            except Exception as e:
                logger.error(f"❌ فشل إرسال إشعار العمولة: {e}")

        conn.commit()
        conn.close()

        await query.answer("✅ تم تفعيل الاشتراك!")
        await context.bot.send_message(
           chat_id=query.message.chat_id,
            text=f"✅ تم تفعيل اشتراك المستخدم {user_id} بالخطة {plan['name']}")

        # إرسال إشعار للمستخدم
        try:
            app = Application.builder().token(MAIN_BOT_TOKEN).build()
            await app.bot.send_message(
                chat_id=user_id,
                text=f"🎉 تم تأكيد اشتراكك بنجاح!\n\n"
                     f"📋 الخطة: {plan['name']}\n"
                     f"💰 الرصيد المضاف: {plan['price']} USDT\n"
                     f"⏳ المدة: {plan['days']} يوم\n\n"
                     f"🎉📈 رصيدك الان بدأ في اول جلسة تداول"
            )
        except Exception as e:
            await send_error_notification(f"خطأ في إرسال إشعار للمستخدم {user_id}: {e}")
    except Exception as e:
        logger.error(f"❌ خطأ في تأكيد الاشتراك: {e}")
        await send_error_notification(f"خطأ في تأكيد الاشتراك: {e}")
# ==================== نظام إدارة المحافظ ====================
async def admin_wallets(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """إدارة محافظ الاستلام"""
    try:
        query = update.callback_query
        await query.answer()

        wallet_text = (
            f"💳 إدارة المحافظ\n\n"
            f"📍 المحفظة النشطة:\n"
            f"`{WALLET_ADDRESS}`\n\n"
            f"🌐 الشبكة: TRC20\n"
            f"⏰ آخر تحديث: {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        )

        keyboard = [
            [InlineKeyboardButton("✏️ تغيير العنوان", callback_data="change_wallet")],
            [InlineKeyboardButton("🔙 رجوع", callback_data="back_to_admin")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(wallet_text, reply_markup=reply_markup, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"❌ خطأ في إدارة المحافظ: {e}")
        await send_error_notification(f"خطأ في إدارة المحافظ: {e}")

# ===================="""إرسال لوحة التحكم إلى قناة الإدارة"""===============

async def send_admin_panel_to_channel(context: ContextTypes.DEFAULT_TYPE = None):
    """إرسال لوحة الأدمن للقناة تلقائياً"""
    try:
        keyboard = [
            [InlineKeyboardButton("📩 المراسلة", callback_data="messaging_system")],
            [InlineKeyboardButton("📢 رسالة جماعية", callback_data="broadcast_message")],
            [InlineKeyboardButton("📊 الإحصائيات", callback_data="admin_stats")],
            [InlineKeyboardButton("👥 المستخدمين", callback_data="admin_users")],
            [InlineKeyboardButton("💰 إضافة أرباح", callback_data="add_profit_menu")],
            [InlineKeyboardButton("🔄 تحديث", callback_data="admin_refresh")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # إذا context موجود، استخدمه. إذا لا، أنشئ Application جديد
        if context and context.bot:
            bot = context.bot
        else:
            app = Application.builder().token(MAIN_BOT_TOKEN).build()
            bot = app.bot

        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text="🛠️ لوحة تحكم الأدمن\n\nاختر الإدارة المطلوبة:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        print("✅ تم إرسال لوحة الأدمن للقناة")

    except Exception as e:
        logger.error(f"❌ خطأ في إرسال لوحة الأدمن: {e}")
async def handle_channel_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة أوامر القناة فقط"""
    if str(update.effective_chat.id) != ADMIN_CHAT_ID:
        return

    # ⚠️ تحقق من update.message
    if not update.message or not update.message.text:
        return  # ⬅️ اخرج إذا ما في رسالة

    if update.message.text == "/panel":
        await send_admin_panel_to_channel(context)

    elif update.message.text.startswith("/addprofit"):
        await handle_add_profit(update, context)

    return  # ⬅️ رجع دائماً
async def admin_pending_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """عرض طلبات الانتظار"""
    query = update.callback_query
    await query.answer()

    # جلب طلبات الانتظار من قاعدة البيانات
    conn = sqlite3.connect('trading_bot.db', check_same_thread=False)
    c = conn.cursor()
    c.execute("SELECT * FROM transactions WHERE status = 'pending'")
    pending_requests = c.fetchall()
    conn.close()

    if pending_requests:
        text = "📋 طلبات الانتظار:\n\n"
        for req in pending_requests:
            text += f"🆔 {req[1]} | 💰 {req[3]} USDT | 📝 {req[2]}\n"
    else:
        text = "✅ لا توجد طلبات في الانتظار"

    keyboard = [[InlineKeyboardButton("🔙 رجوع", callback_data="admin_stats")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text, reply_markup=reply_markup)
# ==================== معالجة الأزرار العامة ====================
async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة أزرار الإدارة المحدثة"""
    query = update.callback_query
    await query.answer()

    data = query.data
    print(f"🔘 زر أدمن مضغوط: {data}")

    parts = data.split(":")
    action = parts[0]
    if data == "check_subscription":
        user_id = query.from_user.id
        print(f"🎯 زر التحقق مضغوط - المستخدم: {user_id}")

        async def check_sub(user_id):
            try:
                print(f"🔍 جاري التحقق من الاشتراك في {CHANNEL_USERNAME}")
                member = await context.bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
                print(f"🔍 حالة المستخدم: {member.status}")
                return member.status in ['member', 'administrator', 'creator']
            except Exception as e:
                print(f"❌ خطأ في التحقق: {e}")
                return False

        if await check_sub(user_id):
            print("✅ المستخدم مشترك")

            referral_code = context.user_data.get('pending_referral')

            await query.edit_message_text(
                f"مرحباً {query.from_user.first_name}! 👋\n"
                "🚀 <b>لإكمال التسجيل، يرجى إرسال:</b>\n"
                "1. الاسم الثلاثي\n"
                "2. رقم الواتساب\n"
                "3. البلد\n\n"
                "📝 <b>مثال:</b>\n"
                "محمد أحمد علي\n"
                "966512345678\n"
                "السعودية\n\n"
                "🔒 <b>ملاحظة:</b> نطلب هذه البيانات لتأكيد هويتك وضمان حقوقك في النظام",
                parse_mode='HTML'
            )

            context.user_data[f'awaiting_registration_{user_id}'] = True
            print(f"🔔 تم تعيين awaiting_registration_{user_id} = True")
            if referral_code:
                context.user_data['referral_code'] = referral_code

        else:
            print("❌ المستخدم غير مشترك")
            await query.answer("❌ لم تنضم للقناة بعد! يرجى الانضمام أولاً", show_alert=True)
        return

    if data.startswith("subscribe_"):
        print(f"🎯 تم التعرف على subscribe_: {data}")
        await handle_subscription(update, context)
        return

    if data.startswith("confirm_payment_"):
        await query.answer()
        print(f"🎯 تم التعرف على confirm_payment_: {data} - جاري استدعاء confirm_payment")
        await confirm_payment(update, context)
        return

    if data.startswith("approve_sub_"):
        print(f"🎯 تم التعرف على approve_sub_: {data} - جاري استدعاء approve_subscription")
        await approve_subscription(update, context)
        return

    if data.startswith("reject_sub_"):
        print(f"🎯 تم التعرف على reject_sub_: {data} - جاري معالجة الرفض")
        user_id = int(data.split("_")[2])
        await query.edit_message_text(f"❌ تم رفض اشتراك المستخدم {user_id}")
        return

       # ========== أزرار المستخدم الأساسية ==========
    if data in ["subscription_plans", "check_balance", "referral_system", "withdraw_menu", "withdraw_profits", "withdraw_bonus", "back_to_main"]:
        user_id = query.from_user.id

        if data == "subscription_plans":
            await show_subscription_plans(update, context)

        elif data == "check_balance":
            user_data = get_user_data(user_id)
            balance = user_data['balance'] if user_data and user_data['balance'] else 0.0
            await query.edit_message_text(f"💼 رصيدك الحالي: {balance:.2f} USDT")

        elif data == "referral_system":
            await show_referral_system(update, context)

        elif data == "withdraw_menu":
            await show_withdraw_menu(update, context)

        elif data == "withdraw_profits":
            await handle_withdraw_profits(update, context)

        elif data == "withdraw_bonus":
            await handle_withdraw_bonus(update, context)

        elif data == "back_to_main":
            await show_main_menu(update, context, user_id)



        return
# ========== نهاية أزرار المستخدم ==========
    if data == "admin_refresh":
        # تحديث اللوحة - الإصلاح الآمن
        try:
            keyboard = [
                [InlineKeyboardButton("📩 المراسلة", callback_data="messaging_system")],
                [InlineKeyboardButton("📢 رسالة جماعية", callback_data="broadcast_message")],
                [InlineKeyboardButton("📊 الإحصائيات", callback_data="admin_stats")],
                [InlineKeyboardButton("👥 المستخدمين", callback_data="admin_users")],
                [InlineKeyboardButton("💰 إضافة أرباح", callback_data="add_profit_menu")],
                [InlineKeyboardButton("🔄 تحديث", callback_data="admin_refresh")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                "🛠️ لوحة تحكم الأدمن - محدث ✅\n\nاختر الإدارة المطلوبة:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            await query.answer("✅ تم تحديث اللوحة")

            # ✅ إرسال نسخة جديدة للقناة أيضاً
            await send_admin_panel_to_channel(context)

        except Exception as e:
            logger.error(f"❌ خطأ في تحديث اللوحة: {e}")
            await query.answer("❌ فشل التحديث")
        return

    if data == "messaging_system":
        # نظام المراسلة الجديد
        chat_id = str(update.effective_chat.id)

        # ✅ حفظ في قاعدة البيانات
        conn = sqlite3.connect('trading_bot.db')
        c = conn.cursor()
        c.execute('''
            INSERT INTO admin_messages (chat_id, target_user_id, message_type)
            VALUES (?, ?, ?)
        ''', (chat_id, 0, 'awaiting_user_id'))  # ⬅️ نوع جديد
        conn.commit()
        conn.close()

        await query.message.reply_text(
            "👤 إرسال رسالة لمستخدم\n\n"
            "📝 أرسل أيدي المستخدم المستهدف:\n\n"
            "مثال:\n"
            "767016290"
        )
        return
    if data == "admin_stats":
        # الإحصائيات
        try:
            conn = sqlite3.connect('trading_bot.db')
            c = conn.cursor()

            c.execute('SELECT COUNT(*) FROM users')
            total_users = c.fetchone()[0]

            c.execute('SELECT COUNT(*) FROM users WHERE date(registration_date) = date("now")')
            new_today = c.fetchone()[0]

            c.execute('SELECT SUM(balance) FROM users')
            total_balance = c.fetchone()[0] or 0

            conn.close()

            await query.message.reply_text(
                f"📊 إحصائيات البوت:\n\n"
                f"👥 إجمالي المستخدمين: {total_users}\n"
                f"🆕 مسجلين اليوم: {new_today}\n"
                f"💰 إجمالي الأرصدة: {total_balance:.2f} USDT\n"
                f"🕒 آخر تحديث: {datetime.now().strftime('%Y-%m-%d %H:%M')}"
            )
        except Exception as e:
            await query.message.reply_text(f"❌ خطأ في جلب الإحصائيات: {e}")
        return
    if data == "add_profit_menu":
        # فتح قائمة إضافة الأرباح
        await query.message.reply_text(
            "💰 إضافة أرباح للمستخدم\n\n"
            "استخدم الأمر:\n"
            "<code>/addprofit user_id amount</code>\n\n"
            "مثال:\n"
            "<code>/addprofit 123456789 150.75</code>\n\n"
            "📝 أو اضغط على زر 'تأكيد الإضافة' في أي طلب أرباح",
            parse_mode='HTML'
        )
        return
    if data == "input_profit_data":
        await query.message.reply_text(
            "📥 إدخال بيانات الإضافة:\n\n"
            "يرجى إرسال البيانات بالصيغة:\n"
            "<code>user_id amount</code>\n\n"
            "مثال:\n"
            "<code>763916290 150</code>\n\n"
            "سيتم تحويلها تلقائياً لأمر الإضافة",
            parse_mode='HTML'
        )
        # حفظ حالة الانتظار
        context.user_data['awaiting_profit_data'] = True
        return
    if data == "admin_users":
        # آخر المستخدمين
        try:
            conn = sqlite3.connect('trading_bot.db')
            c = conn.cursor()
            c.execute('SELECT user_id, full_name, registration_date FROM users ORDER BY registration_date DESC LIMIT 5')
            users = c.fetchall()
            conn.close()

            users_text = "👥 آخر 5 مستخدمين:\n\n"
            for user in users:
                user_id, full_name, reg_date = user
                users_text += f"🆔 {user_id}\n📛 {full_name or 'غير معروف'}\n📅 {reg_date}\n\n"

            await query.message.reply_text(users_text)
        except Exception as e:
            await query.message.reply_text(f"❌ خطأ في جلب المستخدمين: {e}")
        return

    # ⬇️⬇️⬇️ نظام معالجة الأزرار المنظم ⬇️⬇️⬇️

    # 1. أزرار التحويل والسحب
    if action == "confirm_withdrawal" or data.startswith("confirm_transfer:"):
        # تأكيد السحب - كود موحد
        user_id = int(parts[1])
        amount = float(parts[2]) if len(parts) > 2 else 0

        try:
            # خصم المبلغ من رصيد المستخدم
            conn = sqlite3.connect('trading_bot.db')
            c = conn.cursor()
            c.execute('UPDATE users SET balance = balance - ? WHERE user_id = ?', (amount, user_id))
            conn.commit()
            conn.close()

            await context.bot.send_message(
                chat_id=user_id,
                text=f"✅ تم تحويل المبلغ بنجاح إلى محفظتك!\n\n"
                     f"💰 المبلغ: {amount} USDT\n"
                     f"🔄 تم خصم المبلغ من رصيدك\n\n"
                     f"شكراً لاستخدامك خدماتنا. 🌟"
            )
            await query.edit_message_text(
                text=query.message.text + f"\n\n✅ تم التحويل بواسطة {query.from_user.first_name}",
                reply_markup=None
            )
        except Exception as e:
            await query.message.reply_text(f"❌ فشل إرسال التأكيد: {e}")
        return

    # 2. أزرار الرفض
    elif action == "reject_withdrawal" or data.startswith("reject_transfer:"):
        # رفض السحب - كود موحد
        user_id = int(parts[1])
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="❌ تم رفض طلب السحب\n\n"
                     "يرجى التواصل مع الدعم للمزيد من المعلومات.\n"
                     "أو حاول مرة أخرى لاحقاً."
            )
            await query.edit_message_text(
                text=query.message.text + f"\n\n❌ تم الرفض بواسطة {query.from_user.first_name}",
                reply_markup=None
            )
        except Exception as e:
            await query.message.reply_text(f"❌ فشل إرسال الرفض: {e}")
        return

    # 3. أزرار المراسلة
    elif action == "message_user":
        # إرسال رسالة للمستخدم
        user_id = int(parts[1])
        chat_id = str(update.effective_chat.id)

        # ✅ حفظ في قاعدة البيانات
        conn = sqlite3.connect('trading_bot.db')
        c = conn.cursor()
        c.execute('''
            INSERT INTO admin_messages (chat_id, target_user_id, message_type)
            VALUES (?, ?, ?)
        ''', (chat_id, user_id, 'individual'))
        conn.commit()
        conn.close()

        user_data = get_user_data(user_id)
        user_name = user_data['full_name'] if user_data else f"المستخدم {user_id}"

        await query.message.reply_text(
            f"💬 جاهز لإرسال رسالة لـ {user_name}\n\n"
            f"🆔 ID: {user_id}\n\n"
            f"📝 اكتب الرسالة الآن:"
        )
        return

    # 4. زر الرد على المستخدم - ✅ معدل
    elif data.startswith("reply_"):
        try:
            print(f"🎯 معالجة زر الرد: {data}")
            # زر الرد على المستخدم
            user_id = int(data.split("_")[1])
            chat_id = str(update.effective_chat.id)

            # ✅ حفظ في قاعدة البيانات بدل context.user_data
            conn = sqlite3.connect('trading_bot.db')
            c = conn.cursor()
            c.execute('''
                INSERT INTO admin_messages (chat_id, target_user_id, message_type)
                VALUES (?, ?, ?)
            ''', (chat_id, user_id, 'reply'))
            conn.commit()
            conn.close()

            user_data = get_user_data(user_id)
            user_name = user_data['full_name'] if user_data else f"المستخدم {user_id}"

            print(f"🎯 تم حفظ الرد في الداتابيز: {user_id} - {user_name}")

            await query.message.reply_text(
                f"💬 جاهز للرد على {user_name}\n\n"
                f"🆔 ID: {user_id}\n\n"
                f"📝 اكتب رسالة الرد الآن:"
            )
        except (IndexError, ValueError) as e:
            logger.error(f"❌ خطأ في معالجة زر الرد: {e} - البيانات: {data}")
            await query.answer("❌ خطأ في معالجة الزر", show_alert=True)
        return

    # 5. باقي الأزرار
    elif action == "processing_withdrawal":
        # جاري المعالجة
        user_id = int(parts[1])
        amount = float(parts[2])
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"🔄 جاري معالجة طلب السحب...\n\n"
                     f"💰 المبلغ: {amount} USDT\n"
                     f"⏰ سيتم التحويل خلال 24 ساعة.\n\n"
                     f"شكراً لصبرك! 🙏"
            )
            await query.edit_message_text(
                text=query.message.text + f"\n\n🔄 جاري المعالجة بواسطة {query.from_user.first_name}",
                reply_markup=None
            )
        except Exception as e:
            await query.message.reply_text(f"❌ فشل إرسال التأكيد: {e}")
        return

    elif action == "confirm_profit":
        # تأكيد الإضافة (الأرباح)
        user_id = int(parts[1])
        amount = float(parts[2])
        try:
            # تحديث الرصيد في قاعدة البيانات
            conn = sqlite3.connect('trading_bot.db')
            c = conn.cursor()
            c.execute(
                'UPDATE users SET balance = balance + ? WHERE user_id = ?',
                (amount, user_id)
            )
            conn.commit()

            # الحصول على الرصيد الجديد
            c.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
            new_balance = c.fetchone()[0]
            conn.close()

            # إرسال تأكيد للمستخدم
            await context.bot.send_message(
                chat_id=user_id,
                text=f"🎉 تم إضافة أرباح جديدة إلى رصيدك!\n\n"
                     f"💰 المبلغ: {amount} USDT\n"
                     f"💳 الرصيد الجديد: {new_balance} USDT\n\n"
                     f"شكراً لثقتك بنا! 🌟"
            )

            # تحديث الرسالة في القناة
            await query.edit_message_text(
                text=query.message.text + f"\n\n✅ تمت الإضافة بواسطة {query.from_user.first_name}",
                reply_markup=None
            )

        except Exception as e:
            logger.error(f"خطأ في تأكيد الأرباح: {e}")
            await query.message.reply_text(f"❌ فشل في إضافة الأرباح: {e}")
        return
    elif action == "cancel_profit":
        # إلغاء إضافة الأرباح
        user_id = int(parts[1])
        await query.edit_message_text(
            f"❌ تم إلغاء إضافة الأرباح للمستخدم {user_id}",
            reply_markup=None
        )
        return
    elif data == "broadcast_message":
        # زر الرسائل الجماعية
        chat_id = str(update.effective_chat.id)

        # ✅ حفظ في قاعدة البيانات
        conn = sqlite3.connect('trading_bot.db')
        c = conn.cursor()
        c.execute('''
            INSERT INTO admin_messages (chat_id, target_user_id, message_type)
            VALUES (?, ?, ?)
        ''', (chat_id, 0, 'broadcast'))  # 0 للجميع
        conn.commit()
        conn.close()

        await query.message.reply_text(
            "📢 جاهز لإرسال رسالة جماعية\n\n"
            "📝 اكتب الرسالة التي تريد إرسالها لجميع المستخدمين:"
        )
        return
# ==================== التقارير التلقائية ====================
async def send_daily_report():
    """إرسال تقرير يومي"""
    try:
        conn = sqlite3.connect('trading_bot.db', check_same_thread=False)
        c = conn.cursor()

        c.execute("SELECT COUNT(*) FROM users WHERE registration_date = ?", (date.today(),))
        new_users = c.fetchone()[0]

        c.execute("SELECT COUNT(*) FROM transactions WHERE DATE(transaction_date) = ? AND type = 'deposit'", (date.today(),))
        deposits_today = c.fetchone()[0]

        conn.close()

        report_text = (
            f"📊 التقرير اليومي - {date.today()}\n\n"
            f"👥 مستخدمين جدد: {new_users}\n"
            f"💳 إيداعات اليوم: {deposits_today}\n"
            f"🟢 الحالة: النظام يعمل بشكل طبيعي"
        )

        await send_admin_notification(report_text)

    except Exception as e:
        await send_error_notification(f"خطأ في التقرير اليومي: {e}")

async def send_hourly_report():
    """إرسال تقرير ساعي"""
    try:
        # يمكنك إضافة إحصائيات ساعية هنا
        report_text = f"🕐 تقرير ساعي - {datetime.now().strftime('%H:%M')}\nالنظام يعمل بشكل طبيعي ✅"
        await send_admin_notification(report_text)
    except Exception as e:
        await send_error_notification(f"خطأ في التقرير الساعي: {e}")

# ==================== نظام الجدولة البسيط ====================
async def scheduler_background():
    """جدولة بسيطة في الخلفية"""
    while True:
        try:
            now = datetime.now()

            # التقرير اليومي الساعة 8:00
            if now.hour == 8 and now.minute == 0:
                await send_daily_report()

            # التقرير الساعي
            if now.minute == 0:
                await send_hourly_report()

            await asyncio.sleep(60)
        except Exception as e:
            logger.error(f"❌ خطأ في الجدولة: {e}")
            await asyncio.sleep(60)
# ==================== دوال نظام المراسلة (خارج main) ====================
# ==================== نظام المراسلة ====================

async def forward_user_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """تحويل رسائل المستخدمين للقناة - معدل"""
    if not update.effective_user:
        return
    try:
        user_id = update.effective_user.id
        if context.user_data.get(f'awaiting_registration_{user_id}'):
            print(f"🔔 توقف - المستخدم {user_id} بانتظار تسجيل")
            return  # توقف إذا في انتظار تسجيل

        # تجاهل الرسائل من القناة نفسها
        if update.effective_chat.id == int(ADMIN_CHAT_ID):
            return

        user_id = update.effective_user.id
        user_name = update.effective_user.first_name or "مستخدم"
        username = update.effective_user.username or "بدون معرف"

        # تجاهل أوامر البوت
        if update.message.text and update.message.text.startswith('/'):
            return

        # الحصول على نص الرسالة بشكل آمن
        message_text = ""
        if update.message.text:
            message_text = update.message.text
        elif update.message.caption:
            message_text = update.message.caption
        else:
            message_text = "📎 رسالة ميديا"

        print(f"📩 رسالة من مستخدم: {user_name} ({user_id}) - {message_text}")

        # زر الرد على المستخدم
        keyboard = [
            [InlineKeyboardButton(f"📩 رد على {user_name}", callback_data=f"reply_{user_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # ✅ إصلاح: استخدم context.bot بدل عمل Application جديد
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"📬 رسالة جديدة:\n\n"
                 f"👤 الاسم: {user_name}\n"
                 f"🆔 المعرف: @{username}\n"
                 f"🔢 ID: {user_id}\n\n"
                 f"💬 الرسالة:\n{message_text}",
            reply_markup=reply_markup
        )

    except Exception as e:
        print(f"❌ خطأ في forward_user_messages: {e}")

async def handle_all_admin_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة جميع رسائل الأدمن من القناة - نظام موحد"""
    try:
        print(f"🔔 handle_all_admin_messages called - Chat ID: {update.effective_chat.id}")
        if context.user_data is None:
           pass

        # ⬇️⬇️⬇️ تأكد من تجاهل الأوامر ⬇️⬇️⬇️
        message_text = None
        if update.message and update.message.text:
            if update.message.text.startswith('/'):
                print(f"🔔 تجاهل الأمر: {update.message.text}")
                return
            message_text = update.message.text
            print(f"🔔 رسالة عادية: {message_text}")
        elif update.channel_post and update.channel_post.text:
            if update.channel_post.text.startswith('/'):
                print(f"🔔 تجاهل أمر القناة: {update.channel_post.text}")
                return
            message_text = update.channel_post.text
            print(f"🔔 منشور قناة: {message_text}")
        else:
            print("❌ لا توجد رسالة نصية من الأدمن")
            return

        # ✅ جلب البيانات من قاعدة البيانات
        chat_id = str(update.effective_chat.id)
        conn = sqlite3.connect('trading_bot.db')
        c = conn.cursor()
        c.execute('''
            SELECT target_user_id, message_type FROM admin_messages
            WHERE chat_id = ? ORDER BY created_at DESC LIMIT 1
        ''', (chat_id,))
        result = c.fetchone()
        conn.close()

        print(f"🔔 نتيجة query الداتابيز: {result}")

        print(f"🔔 نتيجة query الداتابيز: {result}")

    # ========== 🆕 النظام الجديد باستخدام قاعدة البيانات ==========

        # 1. إذا كان بانتظار أيدي المستخدم
        if result and result[1] == 'awaiting_user_id':
            try:
                target_user_id = int(message_text)

                # التحقق إذا المستخدم موجود
                user_data = get_user_data(target_user_id)
                if not user_data:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text="❌ المستخدم غير موجود في قاعدة البيانات"
                    )
                    return

                # تحديث قاعدة البيانات للرسالة
                conn = sqlite3.connect('trading_bot.db')
                c = conn.cursor()
                c.execute('''
                    UPDATE admin_messages
                    SET target_user_id = ?, message_type = ?
                    WHERE chat_id = ? AND message_type = 'awaiting_user_id'
                ''', (target_user_id, 'awaiting_message', chat_id))
                conn.commit()
                conn.close()

                user_name = user_data['full_name'] or f"المستخدم {target_user_id}"

                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"✅ تم تحديد المستخدم: {user_name}\n\n"
                         f"🆔 الأيدي: {target_user_id}\n\n"
                         f"📝 الآن اكتب نص الرسالة:"
                )
                return

            except ValueError:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="❌ أيدي غير صحيح. يرجى إرسال أرقام فقط."
                )
                return

        # 2. إذا كان بانتظار نص الرسالة
        if result and result[1] == 'awaiting_message':
            target_user_id = result[0]  # الأيدي من قاعدة البيانات

            try:
                # إرسال الرسالة للمستخدم
                await context.bot.send_message(
                    chat_id=target_user_id,
                    text=f"📩 رسالة من الإدارة:\n\n{message_text}\n\n"
                         f"مع تحيات فريق الدعم 🌟"
                )

                # تأكيد للأدمن
                user_data = get_user_data(target_user_id)
                user_name = user_data['full_name'] if user_data else f"المستخدم {target_user_id}"

                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"✅ تم إرسال الرسالة بنجاح\n\n"
                         f"👤 إلى: {user_name}\n"
                         f"🆔 الأيدي: {target_user_id}\n\n"
                         f"💬 الرسالة:\n{message_text}"
                )

               # مسح من قاعدة البيانات
                conn = sqlite3.connect('trading_bot.db')
                c = conn.cursor()
                c.execute('DELETE FROM admin_messages WHERE chat_id = ?', (chat_id,))
                conn.commit()
                conn.close()

            except Exception as e:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"❌ فشل إرسال الرسالة: {e}"
                )
            return

        # ========== النظام الحالي (يبقى كما هو) ==========
        # 1. أولوية: إذا كان في رد على مستخدم
        if result and result[1] == 'reply':
            target_user_id = result[0]
            print(f"📤 جاري إرسال رد للمستخدم: {target_user_id}")

            try:
                await context.bot.send_message(
                    chat_id=target_user_id,
                    text=f"📬 رسالة من الإدارة:\n\n{message_text}\n\n"
                         f"مع تحيات فريق الدعم 🌟"
                )

                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"✅ تم إرسال الرد للمستخدم {target_user_id}"
                )
                print(f"✅ تم إرسال الرد بنجاح للمستخدم {target_user_id}")

                # مسح من قاعدة البيانات
                conn = sqlite3.connect('trading_bot.db')
                c = conn.cursor()
                c.execute('DELETE FROM admin_messages WHERE chat_id = ? AND target_user_id = ?',
                         (chat_id, target_user_id))
                conn.commit()
                conn.close()

            except Exception as send_error:
                logger.error(f"❌ فشل إرسال الرسالة للمستخدم: {send_error}")
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"❌ فشل إرسال الرسالة: {send_error}"
                )
            return

        # 2. إذا كان في رسالة فردية
        if result and result[1] == 'individual':
            target_user_id = result[0]
            print(f"📤 جاري إرسال رسالة فردية للمستخدم: {target_user_id}")

            try:
                await context.bot.send_message(
                    chat_id=target_user_id,
                    text=f"📩 رسالة من الإدارة:\n\n{message_text}\n\n"
                         f"مع تحيات فريق الدعم 🌟"
                )

                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"✅ تم إرسال الرسالة بنجاح إلى المستخدم {target_user_id}"
                )
                print(f"✅ تم إرسال الرسالة بنجاح للمستخدم {target_user_id}")

                # مسح من قاعدة البيانات
                conn = sqlite3.connect('trading_bot.db')
                c = conn.cursor()
                c.execute('DELETE FROM admin_messages WHERE chat_id = ? AND target_user_id = ?',
                         (chat_id, target_user_id))
                conn.commit()
                conn.close()

            except Exception as send_error:
                logger.error(f"❌ فشل إرسال الرسالة للمستخدم: {send_error}")
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"❌ فشل إرسال الرسالة: {send_error}"
                )
            return

        # 3. إذا كان في رسالة جماعية
        if result and result[1] == 'broadcast':
            print(f"📤 جاري إرسال رسالة جماعية لجميع المستخدمين")

            try:
                # جلب جميع المستخدمين النشطين
                conn = sqlite3.connect('trading_bot.db')
                c = conn.cursor()
                c.execute('SELECT user_id FROM users WHERE is_active = 1 OR is_active IS NULL')
                users = c.fetchall()
                conn.close()

                sent_count = 0
                failed_count = 0

                for user in users:
                    try:
                        await context.bot.send_message(
                            chat_id=user[0],
                            text=f"📢 إشعار من الإدارة:\n\n{message_text}\n\n"
                                 f"مع تحيات فريق الدعم 🌟"
                        )
                        sent_count += 1
                    except Exception as e:
                        failed_count += 1

                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"✅ تم إرسال الرسالة الجماعية\n\n"
                         f"📊 النتائج:\n"
                         f"• ✅ تم الإرسال: {sent_count} مستخدم\n"
                         f"• ❌ فشل الإرسال: {failed_count} مستخدم"
                )

                # مسح من قاعدة البيانات
                conn = sqlite3.connect('trading_bot.db')
                c = conn.cursor()
                c.execute('DELETE FROM admin_messages WHERE chat_id = ? AND message_type = ?',
                         (chat_id, 'broadcast'))
                conn.commit()
                conn.close()

            except Exception as e:
                logger.error(f"❌ خطأ في الإرسال الجماعي: {e}")
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"❌ فشل الإرسال الجماعي: {e}"
                )
            return

        # 4. إذا لا يوجد حالة انتظار
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="❌ لم يتم تحديد مستهدف للرسالة\n\n"
                 "📝 الطرق المتاحة:\n"
                 "• اضغط على 'رد على المستخدم' في أي رسالة\n"
                 "• أو استخدم زر 'إرسال رسالة' من لوحة الأدمن"
        )

    except Exception as e:
        logger.error(f"❌ خطأ في معالجة رسالة الأدمن: {e}")
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"❌ فشل إرسال الرسالة: {str(e)[:100]}..."
            )
        except:
            pass
# ===================عرض نظام المراسلة  =================
async def show_messaging_system(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """عرض نظام المراسلة"""
    try:
        query = update.callback_query
        await query.answer()

        text = "📩 نظام المراسلة\n\n"
        text += "• جميع رسائل المستخدمين تصل هنا تلقائياً\n"
        text += "• اضغط على 'رد على المستخدم' في أي رسالة\n"
        text += "• اكتب رسالة الرد وسيتم إرسالها\n\n"
        text += "💡 يمكنك أيضاً استخدام:\n"
        text += "/broadcast نص_الرسالة ← للجميع\n"
        text += "/send user_id الرسالة ← لمستخدم"

        keyboard = [
            [InlineKeyboardButton("🔄 تحديث", callback_data="messaging_system")],
            [InlineKeyboardButton("🔙 رجوع", callback_data="back_to_admin")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text, reply_markup=reply_markup)
    except Exception as e:
        print(f"❌ خطأ في show_messaging_system: {e}")

async def admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """بدء لوحة الأدمن المحدثة"""
    try:
        query = update.callback_query
        await query.answer()

        keyboard = [
            [InlineKeyboardButton("📩 المراسلة", callback_data="messaging_system")],
            [InlineKeyboardButton("📊 الإحصائيات", callback_data="admin_stats")],
            [InlineKeyboardButton("👥 المستخدمين", callback_data="admin_users")],
            [InlineKeyboardButton("💰 إضافة أرباح", callback_data="add_profit_menu")],
            [InlineKeyboardButton("🔄 تحديث", callback_data="admin_refresh")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "🛠️ لوحة تحكم الأدمن\n\nاختر الإدارة المطلوبة:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"خطأ في admin_start: {e}")
async def handle_withdraw_inputs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة مدخلات السحب - منفصلة عن المراسلة"""
    try:
        user_id = update.effective_user.id

        # إذا كان بانتظار إدخال مبلغ
        if context.user_data.get('awaiting_amount'):
            print(f"💰 معالجة مبلغ السحب للمستخدم {user_id}")
            await handle_withdraw_amount_input(update, context)
            return

        # إذا كان بانتظار إدخال محفظة
        if context.user_data.get('awaiting_wallet'):
            print(f"💳 معالجة محفظة السحب للمستخدم {user_id}")
            await handle_wallet_address_input(update, context)
            return

        # إذا لا، روح للمراسلة العادية
        print(f"📩 تحويل رسالة عادية للمستخدم {user_id}")
        await forward_user_messages(update, context)

    except Exception as e:
        logger.error(f"❌ خطأ في معالجة مدخلات السحب: {e}")
# ==================== التشغيل الرئيسي ====================
# ==================== التشغيل ====================
async def handle_add_profit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """إضافة أرباح لمحفظة مستخدم من خلال الأزرار في القناة"""
    try:
        print(f"🎯 handle_add_profit CALLED! - Chat: {update.effective_chat.id}")
        print(f"🎯 Args: {context.args}")

        # هذا الأمر للإدمن فقط في القناة
        if str(update.effective_chat.id) != ADMIN_CHAT_ID:
            print("❌ ليس قناة الأدمن")
            return

        if len(context.args) != 2:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="📊 إضافة أرباح للمستخدم:\n\n"
                     "استخدام: /addprofit <user_id> <amount>\n\n"
                     "مثال: /addprofit 123456789 100.5"
            )
            return

        target_user_id = int(context.args[0])
        amount = float(context.args[1])

        print(f"🔍 جاري البحث عن المستخدم: {target_user_id}")

        # الحصول على بيانات المستخدم
        conn = sqlite3.connect('trading_bot.db')
        c = conn.cursor()
        c.execute('SELECT username, full_name, balance FROM users WHERE user_id = ?', (target_user_id,))
        user_data = c.fetchone()
        conn.close()

        print(f"🔍 نتيجة البحث في الداتابيز: {user_data}")

        if not user_data:
            print("❌ المستخدم غير موجود في الداتابيز")
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="❌ المستخدم غير موجود"
            )
            return

        username, full_name, current_balance = user_data
        print(f"✅ وجدنا المستخدم: {full_name} - الرصيد: {current_balance}")

        # عرض طلب الإضافة مع الأزرار
        keyboard = [
            [InlineKeyboardButton("✅ تأكيد الإضافة", callback_data=f"confirm_profit:{target_user_id}:{amount}")],
            [InlineKeyboardButton("❌ إلغاء", callback_data=f"cancel_profit:{target_user_id}")],
            [InlineKeyboardButton("📩 رسالة للمستخدم", callback_data=f"message_user:{target_user_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        print(f"📤 جاري إرسال الرسالة للقناة...")

        # إرسال الرسالة
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"📊 طلب إضافة أرباح:\n\n"
                 f"👤 المستخدم: {target_user_id}\n"
                 f"📛 الاسم: {full_name or 'غير مسجل'}\n"
                 f"🔗 @{username or 'بدون'}\n"
                 f"💰 الرصيد الحالي: {current_balance}\n"
                 f"💵 المبلغ المضاف: {amount}\n"
                 f"🔄 الرصيد الجديد: {current_balance + amount}\n\n"
                 f"⏰ {datetime.now().strftime('%Y-%m-%d %H:%M')}",
            reply_markup=reply_markup
        )

        print("✅ تم إرسال الرسالة بنجاح!")

    except Exception as e:
        print(f"❌ خطأ في handle_add_profit: {e}")
        logger.error(f"خطأ في إضافة الأرباح: {e}")
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"❌ حدث خطأ في معالجة الطلب: {str(e)[:100]}"
            )
        except Exception as e2:
            print(f"❌ فشل إرسال رسالة الخطأ: {e2}")
async def handle_profit_data_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة إدخال بيانات الأرباح من الأدمن"""
    try:
        if context.user_data.get('awaiting_profit_data'):
            text = update.message.text.strip()
            parts = text.split()

            if len(parts) == 2:
                user_id, amount = parts
                # تحويل لأمر addprofit
                context.args = [user_id, amount]
                await handle_add_profit(update, context)
            else:
                await update.message.reply_text("❌ صيغة خاطئة. مثال: 763916290 150")

            # مسح حالة الانتظار
            context.user_data.pop('awaiting_profit_data', None)

    except Exception as e:
        logger.error(f"خطأ في معالجة بيانات الأرباح: {e}")
        await update.message.reply_text("❌ حدث خطأ في معالجة البيانات")

# ==================== نظام الإحالة ====================

def init_referral_system():
    """تهيئة نظام الإحالة"""
    conn = sqlite3.connect('trading_bot.db')
    c = conn.cursor()

    # إنشاء جدول referrals إذا غير موجود
    c.execute('''
        CREATE TABLE IF NOT EXISTS referrals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            referrer_id INTEGER,
            referred_id INTEGER,
            commission_earned DECIMAL(10,2) DEFAULT 0,
            referral_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    # إضافة حقل referral_code لجدول users إذا غير موجود
    try:
        c.execute("ALTER TABLE users ADD COLUMN referral_code TEXT")
        print("✅ تم إضافة حقل referral_code")
    except sqlite3.OperationalError:
        pass  # الحقل موجود مسبقاً

    conn.commit()
    conn.close()
    print("✅ نظام الإحالة مهيأ")

def get_referral_stats(user_id):
    """جلب إحصائيات الإحالة"""
    try:
        conn = sqlite3.connect('trading_bot.db')
        c = conn.cursor()

        c.execute("SELECT COUNT(*) FROM referrals WHERE referrer_id = ?", (user_id,))
        referral_count = c.fetchone()[0]

        c.execute("SELECT SUM(commission_earned) FROM referrals WHERE referrer_id = ?", (user_id,))
        result = c.fetchone()[0]
        total_commissions = result if result is not None else 0

        conn.close()
        return referral_count, total_commissions

    except Exception as e:
        print(f"❌ خطأ في جلب إحصائيات الإحالة: {e}")
        return 0, 0

async def show_referral_system(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """عرض نظام الإحالة"""
    try:
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        user_data = get_user_data(user_id)

        # 🔥 التعديل: استخدام OR بدل get مع default
        referral_code = user_data.get('referral_code') or f"REF{user_id}"

        # 🔥 الجديد: حفظ referral_code إذا كان غير موجود
        if not user_data.get('referral_code'):
            try:
                conn = sqlite3.connect('trading_bot.db')
                c = conn.cursor()
                c.execute('UPDATE users SET referral_code = ? WHERE user_id = ?', (referral_code, user_id))
                conn.commit()
                conn.close()
                print(f"✅ تم حفظ referral_code للمستخدم {user_id}: {referral_code}")
            except Exception as e:
                print(f"❌ خطأ في حفظ referral_code: {e}")

        # 🔥 التعديل: استخدم معرف البوت الصحيح
        bot_username = "Arba7Saudi_bot"
        referral_link = f"https://t.me/{bot_username}?start={referral_code}"

        # 🔥 الجديد: جلب إحصائيات الإحالة
        referral_count, total_commissions = get_referral_stats(user_id)

        referral_text = f"""🎁 <b>نظام الدعوة والتوصية</b>

💼 <b>كود دعوتك:</b> <code>{referral_code}</code>

🔗 <b>رابط الدعوة:</b>
<code>{referral_link}</code>

📊 <b>إحصائياتك:</b>
• 👥 عدد الأحالة: {referral_count} شخص
• 💰 إجمالي العمولات: {total_commissions:.2f} USDT

📣 <b>كيفية الاستخدام:</b>
1. انسخ الرابط أعلاه 📋
2. أرسله لأصدقائك 📤
3. عندما ينضم صديق ويشترك، ستحصل على عمولة 10% من قيمة اشتراكه 💰

🎯 <b>ملاحظة:</b> العمولة توزع تلقائياً عند اشتراك المحال"""

        keyboard = [
            [InlineKeyboardButton("📋 نسخ الرابط", callback_data="copy_referral_link")],
            [InlineKeyboardButton("🔙 رجوع", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            referral_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

    except Exception as e:
        print(f"❌ خطأ في عرض نظام الإحالة: {e}")
# ==================== اختبار ===============
async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """أمر الاختبار"""
    await update.message.reply_text("✅ البوت شغال بشكل طبيعي!")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """عرض رسالة المساعدة المحدثة"""
    help_text = """
<b>🆘 مركز المساعدة والدعم</b>

<code>━━━━━━━━━━━━━━━━━━━━</code>

<b>📞 طرق التواصل مع الدعم:</b>

• <b>يمكنك كتابة أي رسالة هنا في البوت</b>
• <b>ستصل رسالتك مباشرة إلى فريق الدعم</b>
• <b>سيتم الرد عليك خلال دقائق</b>

<code>━━━━━━━━━━━━━━━━━━━━</code>

<b>❓ الأسئلة الشائعة:</b>

• <i>كيف أبدأ التداول؟</i>
↳ إضغط على "خطط الاشتراك" واختر الخطة المناسبة

• <i>متى أستطيع سحب الأرباح؟</i>
↳ يمكنك السحب كل 24 ساعة بدءاً من 25$

• <i>كيف أدعو أصدقائي؟</i>
↳ إضغط على "دعوة الأصدقاء" وانسخ رابط الدعوة

<code>━━━━━━━━━━━━━━━━━━━━</code>

<b>📢 ملاحظة:</b>
<i>نحن هنا لمساعدتك على مدار الساعة</i>
<i>لا تتردد في مراسلتنا لأي استفسار</i>
    """

    await update.message.reply_text(help_text, parse_mode='HTML')
async def admin_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """عرض إحصائيات البوت"""
    # التحقق من صلاحية الأدمن
    user_id = update.effective_user.id
    if str(user_id) != ADMIN_CHAT_ID:
        await update.message.reply_text("❌ هذا الأمر للمشرفين فقط!")
        return

    conn = sqlite3.connect('trading_bot.db')
    c = conn.cursor()

    c.execute("SELECT COUNT(*) FROM users")
    total_users = c.fetchone()[0]

    c.execute("SELECT COUNT(*) FROM referrals")
    total_referrals = c.fetchone()[0]

    c.execute("SELECT SUM(balance) FROM users")
    total_balance = c.fetchone()[0] or 0

    conn.close()

    stats_text = f"""
📊 **إحصائيات البوت:**

👥 المستخدمين: {total_users}
🎁 الإحالات: {total_referrals}
💰 إجمالي الأرصدة: {total_balance:.2f} USDT

🟢 البوت شغال بشكل طبيعي
    """
    await update.message.reply_text(stats_text, parse_mode='Markdown')

async def admin_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """عرض آخر المستخدمين"""
    user_id = update.effective_user.id
    if str(user_id) != ADMIN_CHAT_ID:
        await update.message.reply_text("❌ هذا الأمر للمشرفين فقط!")
        return

    conn = sqlite3.connect('trading_bot.db')
    c = conn.cursor()
    c.execute("SELECT user_id, username, registration_date FROM users ORDER BY id DESC LIMIT 10")
    users = c.fetchall()
    conn.close()

    if users:
        text = "👥 **آخر 10 مستخدمين:**\n\n"
        for user in users:
            text += f"🆔 {user[0]} | 👤 @{user[1] or 'بدون'} | 📅 {user[2][:10]}\n"
    else:
        text = "❌ لا يوجد مستخدمين مسجلين"

    await update.message.reply_text(text, parse_mode='Markdown')
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة الأخطاء العامة"""
    try:
        # تسجيل الخطأ
        error_msg = f"❌ خطأ غير متوقع: {context.error}"
        print(error_msg)

        # إرسال تقرير الخطأ لقناة الإدارة
        error_message = f"""
🚨 **تقرير خطأ**

📝 الخطأ: {str(context.error)[:200]}
⏰ الوقت: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """

        app = Application.builder().token(MAIN_BOT_TOKEN).build()
        await app.bot.send_message(
            chat_id=ERROR_CHANNEL,
            text=error_message,
            parse_mode='Markdown'
        )

    except Exception as e:
        # إذا فشل إرسال تقرير الخطأ
        print(f"❌ فشل في معالجة الخطأ: {e}")

async def send_error_notification(error_message: str):
    """إرسال إشعار خطأ لقناة الإدارة"""
    try:
        app = Application.builder().token(MAIN_BOT_TOKEN).build()
        await app.bot.send_message(
            chat_id=ERROR_CHANNEL,
            text=f"🚨 **تقرير خطأ**\n\n{error_message}",
            parse_mode='Markdown'
        )
    except Exception as e:
        print(f"❌ فشل إرسال إشعار الخطأ: {e}")

# ==================== دوال الأوامر الجديدة ====================

async def handle_balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة أمر /balance"""
    try:
        user_id = update.effective_user.id
        user_data = get_user_data(user_id)

        if not user_data:
            await update.message.reply_text("❌ لم يتم العثور على بياناتك. استخدم /start أولاً.")
            return

        balance = user_data.get('balance', 0)
        await update.message.reply_text(f"💼 رصيدك الحالي: {balance:.2f} USDT")

    except Exception as e:
        logger.error(f"خطأ في أمر balance: {e}")
        await update.message.reply_text("❌ حدث خطأ في جلب الرصيد")
async def handle_plans_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة أمر /plans"""
    try:
        # إنشاء callback query وهمية للأمر
        class MockQuery:
            def __init__(self, update):
                self.from_user = update.effective_user
                self.message = update.message
            async def answer(self):
                pass
            async def edit_message_text(self, text, reply_markup=None):
                await self.message.reply_text(text, reply_markup=reply_markup)

        mock_update = type('MockUpdate', (), {'callback_query': MockQuery(update)})()
        await show_subscription_plans(mock_update, context)

    except Exception as e:
        logger.error(f"خطأ في أمر plans: {e}")
        await update.message.reply_text("📋 خطط الاشتراك:\n\nاستخدم الزر في القائمة الرئيسية لعرض الخطط")

async def handle_withdraw_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة أمر /withdraw"""
    try:
        # إنشاء callback query وهمية للأمر
        class MockQuery:
            def __init__(self, update):
                self.from_user = update.effective_user
                self.message = update.message
            async def answer(self):
                pass
            async def edit_message_text(self, text, reply_markup=None):
                await self.message.reply_text(text, reply_markup=reply_markup)

        mock_update = type('MockUpdate', (), {'callback_query': MockQuery(update)})()
        await show_withdraw_menu(mock_update, context)

    except Exception as e:
        logger.error(f"خطأ في أمر withdraw: {e}")
        await update.message.reply_text("💳 نظام السحب:\n\nاستخدم الزر في القائمة الرئيسية لقائمة السحب")
async def handle_subscription_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة أمر /mysubscription"""
    try:
        user_id = update.effective_user.id
        user_data = get_user_data(user_id)

        if not user_data:
            await update.message.reply_text("❌ لم يتم العثور على بياناتك. استخدم /start أولاً.")
            return

        subscription_level = user_data.get('subscription_level')

        if not subscription_level or subscription_level == 'basic':
            # إذا ما عندو اشتراك نشط
            await update.message.reply_text(
                "📋 حالة الاشتراك:\n\n"
                "🔸 الحالة: ❌ بدون اشتراك نشط\n\n"
                "🚀 ابدأ رحلتك الاستثمارية الآن!\n\n"
                "💎 لماذا تشترك معنا؟\n"
                "• 📈 أرباح تصل إلى 150%\n"
                "• ⚡ تنفيذ فوري للصفقات\n"
                "• 🛡️ حماية كاملة لرأس المال\n"
                "• 📊 تحليلات حية 24/7\n\n"
                "🎯 اختر خطتك المناسبة وابدأ تحقيق الأرباح!\n\n"
                "👉 استخدم /plans لعرض جميع الخطط المتاحة"
            )
        else:
            # إذا عنده اشتراك نشط
            if subscription_level in SUBSCRIPTION_PLANS:
                plan_data = SUBSCRIPTION_PLANS[subscription_level]
                plan_name = plan_data['name']
                profits = plan_data['profits']
                days = plan_data['days']
                price = plan_data['price']

                await update.message.reply_text(
                    f"📋 اشتراكك الحالي:\n\n"
                    f"✅ الحالة: 🟢 نشط\n"
                    f"🔸 الخطة: {plan_name}\n"
                    f"💰 السعر: {price} USDT\n"
                    f"📈 الأرباح: {profits}\n"
                    f"⏳ المدة: {days} يوم\n\n"
                    f"🎯 يمكنك ترقية خطتك للحصول على أرباح أعلى!\n\n"
                    f"👉 استخدم /plans لعرض خطط الترقية"
                )
            else:
                await update.message.reply_text(
                    f"📋 اشتراكك الحالي:\n\n"
                    f"✅ الحالة: 🟢 نشط\n"
                    f"🔸 المستوى: {subscription_level}\n\n"
                    f"🎯 استخدم /plans لعرض الخطط المتاحة"
                )

    except Exception as e:
        logger.error(f"خطأ في أمر mysubscription: {e}")
        await update.message.reply_text("📋 حدث خطأ في جلب بيانات الاشتراك")
async def handle_invite_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة أمر /invite"""
    try:
        # إنشاء callback query وهمية للأمر
        class MockQuery:
            def __init__(self, update):
                self.from_user = update.effective_user
                self.message = update.message
            async def answer(self):
                pass
            async def edit_message_text(self, text, reply_markup=None, parse_mode=None):
                await self.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)

        mock_update = type('MockUpdate', (), {'callback_query': MockQuery(update)})()
        await show_referral_system(mock_update, context)  # ⬅️ نفس الدالة

    except Exception as e:
        logger.error(f"خطأ في أمر invite: {e}")
        await update.message.reply_text("❌ حدث خطأ في إنشاء رابط الدعوة")
# Handler احتياطي للتسجيل
async def debug_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print(f"🔍 DEBUG HANDLER - User: {user_id}, Text: {update.message.text}")
    await handle_user_registration(update, context)


# ==================== التشغيل الرئيسي ====================
if __name__ == "__main__":
    init_referral_system()
    print("✅ أنظمة البوت مهيأة")

    app = Application.builder().token(MAIN_BOT_TOKEN).build()

    # 1. CommandHandlers الأساسية
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("test", test_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("stats", admin_stats_command))
    app.add_handler(CommandHandler("users", admin_users_command))
    app.add_handler(CommandHandler("balance", handle_balance_command))
    app.add_handler(CommandHandler("plans", handle_plans_command))
    app.add_handler(CommandHandler("mysubscription", handle_subscription_command))
    app.add_handler(CommandHandler("withdraw", handle_withdraw_command))
    app.add_handler(CommandHandler("invite", handle_invite_command))

    # 2. CommandHandler الخاص بـ addprofit في القناة فقط
    app.add_handler(CommandHandler("addprofit", handle_add_profit, filters=filters.Chat(chat_id=int(ADMIN_CHAT_ID))))


    # 4. MessageHandlers للمستخدمين العاديين - ⬇️⬇️⬇️ غير الترتيب ⬇️⬇️⬇️
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_withdraw_inputs))    # 1. السحب أولاً
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, debug_registration))  # ⬅️ جرب هذا
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_registration))  # 2. التسجيل ثانياً
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, forward_user_messages))     # 3. المراسلة أخيراً
    app.add_handler(MessageHandler(filters.PHOTO, handle_payment_proof))
    # 3. MessageHandlers للقناة (الأدمن)
    app.add_handler(MessageHandler(filters.TEXT & filters.Chat(chat_id=ADMIN_CHAT_ID), handle_channel_commands))
    app.add_handler(MessageHandler(filters.ALL & filters.Chat(chat_id=int(ADMIN_CHAT_ID)), handle_all_admin_messages))
    app.add_handler(MessageHandler(filters.TEXT & filters.Chat(chat_id=int(ADMIN_CHAT_ID)) & ~filters.COMMAND, handle_profit_data_input))

    # 5. CallbackHandler للأزرار
    app.add_handler(CallbackQueryHandler(handle_admin_callback, pattern=r"^(check_subscription|confirm_withdrawal|reject_withdrawal|message_user|admin_|confirm_transfer|reject_transfer|reply_|withdraw_|subscribe_|confirm_payment|approve_sub|back_to_|check_balance|referral_system|subscription_plans|copy_referral_link|messaging_system|admin_pending|add_profit_menu|cancel_profit|confirm_profit|withdraw_menu|back_to_main|input_profit_data|processing_withdrawal|broadcast_message|withdraw_profits|withdraw_bonus)"))

    # 6. Error handler
    app.add_error_handler(error_handler)

    print("🎉 البوت شغال الآن!")
    app.run_polling(drop_pending_updates=True, close_loop=False)
