import os
import asyncio
import logging
import sqlite3
import time
from datetime import datetime, date
from threading import Thread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.error import TelegramError

# 🔧 إعدادات التسجيل
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# 🔐 المتغيرات الثابتة مباشرة
MAIN_BOT_TOKEN = "7566859808:AAFHlYo7nVIGDe6jnYIiI1EfsU-HeCntH5E"
ARCHIVE_CHANNEL = "-1003178411340"
ERROR_CHANNEL = "-1003091305351"
WALLET_ADDRESS = "TYy5CnBE3k..."
ADMIN_CHAT_ID = "-1003178411340"

# ==================== دالة init_database المضافة ====================
def init_database():
    """تهيئة قاعدة البيانات والجداول"""
    try:
        conn = sqlite3.connect('trading_bot.db', check_same_thread=False)
        c = conn.cursor()

        # جدول المستخدمين
        c.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                full_name TEXT,
                phone TEXT,
                country TEXT,
                balance REAL DEFAULT 0.0,
                wallet_address TEXT,
                referral_code TEXT UNIQUE,
                referred_by INTEGER,
                subscription_level TEXT DEFAULT 'basic',
                registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_active INTEGER DEFAULT 1
            )
        ''')

        # جدول المعاملات
        c.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                type TEXT,
                amount REAL,
                status TEXT,
                description TEXT,
                transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')

        # جدول الإحالات
        c.execute('''
            CREATE TABLE IF NOT EXISTS referrals (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                referrer_id INTEGER,
                referred_id INTEGER,
                commission_earned REAL DEFAULT 0,
                referral_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (referrer_id) REFERENCES users (user_id),
                FOREIGN KEY (referred_id) REFERENCES users (user_id)
            )
        ''')

        conn.commit()
        conn.close()
        logger.info("✅ قاعدة البيانات مهيأة بنجاح")
    except Exception as e:
        logger.error(f"❌ خطأ في تهيئة قاعدة البيانات: {e}")

# ==================== دوال مساعدة جديدة ====================
def get_db_connection():
    """إنشاء اتصال بقاعدة البيانات"""
    return sqlite3.connect('trading_bot.db', check_same_thread=False)

def execute_db_query(query, params=()):
    """تنفيذ استعلام على قاعدة البيانات"""
    conn = get_db_connection()
    c = conn.cursor()
    c.execute(query, params)
    result = c.fetchall()
    conn.commit()
    conn.close()
    return result

# ==================== نظام الإدارة المحسن ====================
async def send_admin_panel(context: ContextTypes.DEFAULT_TYPE):
    """إرسال لوحة التحكم إلى قناة الإدارة"""
    try:
        keyboard = [
            [InlineKeyboardButton("📩 المراسلة", callback_data="messaging_system")],
            [InlineKeyboardButton("📊 الإحصائيات", callback_data="admin_stats")],
            [InlineKeyboardButton("👥 المستخدمين", callback_data="admin_users")],
            [InlineKeyboardButton("💰 إضافة أرباح", callback_data="add_profit_menu")],
            [InlineKeyboardButton("🔄 تحديث", callback_data="admin_refresh")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text="🛠️ **لوحة تحكم الأدمن**\n\nاختر الإدارة المطلوبة:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"❌ خطأ في إرسال لوحة التحكم: {e}")

async def handle_admin_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة أوامر الأدمن في القناة"""
    if str(update.effective_chat.id) != ADMIN_CHAT_ID:
        return
        
    if update.message.text == "/panel":
        await send_admin_panel(context)
    elif update.message.text == "/stats":
        await show_admin_stats(update, context)

# ==================== نظام السحب المحسن ====================
async def handle_withdrawal_flow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """إدارة تدفق طلبات السحب"""
    try:
        user_id = update.effective_user.id
        
        # التحقق من رصيد المستخدم
        result = execute_db_query("SELECT balance, full_name FROM users WHERE user_id = ?", (user_id,))
        if not result:
            await update.message.reply_text("❌ يجب التسجيل أولاً باستخدام /start")
            return
            
        balance, full_name = result[0]
        
        if balance < 25:
            await update.message.reply_text("❌ الحد الأدنى للسحب 25 USDT")
            return
            
        # طلب عنوان المحفظة
        context.user_data['awaiting_withdrawal'] = True
        await update.message.reply_text(
            f"💳 طلب سحب الأرباح\n\n"
            f"💰 رصيدك: {balance} USDT\n\n"
            f"🔗 الرجاء إرسال عنوان محفظتك:"
        )
        
    except Exception as e:
        logger.error(f"خطأ في طلب السحب: {e}")
        await update.message.reply_text("❌ حدث خطأ في معالجة طلبك")

async def process_withdrawal_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة طلب السحب وإرساله للقناة"""
    try:
        user_id = update.effective_user.id
        wallet_address = update.message.text.strip()
        
        if len(wallet_address) < 10:
            await update.message.reply_text("❌ عنوان المحفظة غير صالح")
            return
            
        # الحصول على بيانات المستخدم
        result = execute_db_query(
            "SELECT balance, full_name, username FROM users WHERE user_id = ?", 
            (user_id,)
        )
        if not result:
            await update.message.reply_text("❌ المستخدم غير موجود")
            return
            
        balance, full_name, username = result[0]
        
        # إرسال طلب السحب للقناة
        keyboard = [
            [
                InlineKeyboardButton("✅ تم التحويل", callback_data=f"confirm_withdraw:{user_id}"),
                InlineKeyboardButton("🔄 قيد المعالجة", callback_data=f"processing_withdraw:{user_id}")
            ],
            [
                InlineKeyboardButton("❌ رفض الطلب", callback_data=f"reject_withdraw:{user_id}"),
                InlineKeyboardButton("📩 إرسال رسالة", callback_data=f"message_user:{user_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"🔄 طلب سحب جديد\n\n"
                 f"👤 المستخدم: {full_name}\n"
                 f"🔗 @{username or 'بدون'}\n"
                 f"🆔 ID: {user_id}\n"
                 f"💰 الرصيد: {balance} USDT\n"
                 f"🔗 المحفظة: {wallet_address}\n\n"
                 f"⏰ {datetime.now().strftime('%Y-%m-%d %H:%M')}",
            reply_markup=reply_markup
        )
        
        # تأكيد للمستخدم
        await update.message.reply_text(
            f"✅ تم استلام طلب السحب!\n\n"
            f"💳 المحفظة: {wallet_address}\n"
            f"💰 المبلغ: {balance} USDT\n\n"
            f"🔄 جاري معالجة طلبك..."
        )
        
        # مسح حالة الانتظار
        context.user_data.pop('awaiting_withdrawal', None)
        
    except Exception as e:
        logger.error(f"خطأ في معالجة السحب: {e}")
        await update.message.reply_text("❌ حدث خطأ في معالجة الطلب")

# ==================== نظام معالجة الأزرار الموحد ====================
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة جميع الأزرار بشكل موحد"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    try:
        if data == "back_to_main":
            await show_main_menu(update, context)
            
        elif data == "withdraw_menu":
            await show_withdraw_menu(update, context)
            
        elif data == "withdraw_profits":
            await handle_withdrawal_flow(update, context)
            
        elif data.startswith("confirm_withdraw:"):
            user_id = int(data.split(":")[1])
            await confirm_withdrawal(update, context, user_id)
            
        elif data.startswith("reject_withdraw:"):
            user_id = int(data.split(":")[1])
            await reject_withdrawal(update, context, user_id)
            
        elif data == "admin_stats":
            await show_admin_stats(update, context)
            
        elif data == "admin_users":
            await show_admin_users(update, context)
            
        elif data == "add_profit_menu":
            await show_add_profit_menu(update, context)
            
        elif data == "admin_refresh":
            await send_admin_panel(context)
            await query.answer("✅ تم تحديث اللوحة")
            
        else:
            await query.answer("⚙️ هذه الخاصية قيد التطوير")
            
    except Exception as e:
        logger.error(f"خطأ في معالجة الزر {data}: {e}")
        await query.answer("❌ حدث خطأ")

# ==================== دوال المساعدة للإدارة ====================
async def confirm_withdrawal(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """تأكيد عملية السحب"""
    query = update.callback_query
    
    try:
        # خصم المبلغ من رصيد المستخدم
        execute_db_query(
            "UPDATE users SET balance = 0 WHERE user_id = ?", 
            (user_id,)
        )
        
        # إشعار المستخدم
        await context.bot.send_message(
            chat_id=user_id,
            text="✅ تم تحويل المبلغ بنجاح إلى محفظتك!\n\nشكراً لاستخدامك خدماتنا. 🌟"
        )
        
        await query.edit_message_text(
            text=query.message.text + f"\n\n✅ تم التحويل بواسطة {query.from_user.first_name}",
            reply_markup=None
        )
        
    except Exception as e:
        await query.message.reply_text(f"❌ فشل في تأكيد السحب: {e}")

async def reject_withdrawal(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """رفض عملية السحب"""
    query = update.callback_query
    
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text="❌ تم رفض طلب السحب\n\nيرجى التواصل مع الدعم للمزيد من المعلومات."
        )
        
        await query.edit_message_text(
            text=query.message.text + f"\n\n❌ تم الرفض بواسطة {query.from_user.first_name}",
            reply_markup=None
        )
        
    except Exception as e:
        await query.message.reply_text(f"❌ فشل في رفض السحب: {e}")

async def show_admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """عرض إحصائيات الأدمن"""
    query = update.callback_query
    
    try:
        result = execute_db_query("SELECT COUNT(*) FROM users")
        total_users = result[0][0]
        
        result = execute_db_query("SELECT SUM(balance) FROM users")
        total_balance = result[0][0] or 0
        
        stats_text = (
            f"📊 إحصائيات البوت\n\n"
            f"👥 إجمالي المستخدمين: {total_users}\n"
            f"💰 إجمالي الأرصدة: {total_balance:.2f} USDT\n"
            f"🕒 آخر تحديث: {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        )
        
        keyboard = [[InlineKeyboardButton("🔙 رجوع", callback_data="admin_refresh")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(stats_text, reply_markup=reply_markup)
        
    except Exception as e:
        await query.message.reply_text(f"❌ خطأ في جلب الإحصائيات: {e}")

async def show_admin_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """عرض المستخدمين للأدمن"""
    query = update.callback_query
    
    try:
        result = execute_db_query("SELECT user_id, full_name, balance FROM users ORDER BY registration_date DESC LIMIT 10")
        
        users_text = "👥 آخر 10 مستخدمين:\n\n"
        for user in result:
            user_id, full_name, balance = user
            users_text += f"🆔 {user_id} | 📛 {full_name or 'غير معروف'} | 💰 {balance}\n"
        
        keyboard = [[InlineKeyboardButton("🔙 رجوع", callback_data="admin_refresh")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(users_text, reply_markup=reply_markup)
        
    except Exception as e:
        await query.message.reply_text(f"❌ خطأ في جلب المستخدمين: {e}")

async def show_add_profit_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """عرض قائمة إضافة الأرباح"""
    query = update.callback_query
    
    try:
        await query.message.reply_text(
            "💰 إضافة أرباح للمستخدم\n\n"
            "استخدم الأمر:\n"
            "<code>/addprofit user_id amount</code>\n\n"
            "مثال:\n"
            "<code>/addprofit 123456789 150.75</code>",
            parse_mode='HTML'
        )
        
    except Exception as e:
        await query.message.reply_text(f"❌ خطأ في عرض القائمة: {e}")

# ==================== الدوال الأساسية المعدلة ====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """بدء البوت الرئيسي"""
    try:
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name

        # التحقق من تسجيل المستخدم
        result = execute_db_query("SELECT * FROM users WHERE user_id = ?", (user_id,))
        
        if not result:
            # طلب التسجيل
            context.user_data['awaiting_registration'] = True
            await update.message.reply_text(
                f"مرحباً {user_name}! 👋\n\n"
                "🚀 لإكمال التسجيل، يرجى إرسال:\n"
                "1. الاسم الثلاثي\n"
                "2. رقم الواتساب\n"
                "3. البلد\n\n"
                "مثال:\n"
                "محمد أحمد علي\n"
                "966512345678\n"
                "السعودية"
            )
        else:
            # عرض القائمة الرئيسية
            await show_main_menu(update, context)
            
    except Exception as e:
        logger.error(f"❌ خطأ في أمر start: {e}")
        await update.message.reply_text("❌ حدث خطأ، يرجى المحاولة مرة أخرى")

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """عرض القائمة الرئيسية"""
    try:
        user_id = update.effective_user.id
        
        # جلب رصيد المستخدم
        result = execute_db_query("SELECT balance FROM users WHERE user_id = ?", (user_id,))
        balance = result[0][0] if result else 0

        keyboard = [
            [InlineKeyboardButton("💼 خطط الاشتراك", callback_data="subscription_plans")],
            [InlineKeyboardButton("💰 رصيدي", callback_data="check_balance")],
            [InlineKeyboardButton("🎁 ادعو أصدقائك", callback_data="referral_system")],
            [InlineKeyboardButton("💳 سحب الأرباح", callback_data="withdraw_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.edit_message_text(
                f"مرحباً بعودتك! 👋\n"
                f"💼 محفظتك: {balance:.2f} USDT\n\n"
                "اختر من القائمة:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                f"مرحباً بعودتك! 👋\n"
                f"💼 محفظتك: {balance:.2f} USDT\n\n"
                "اختر من القائمة:",
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"❌ خطأ في عرض القائمة الرئيسية: {e}")
        await update.message.reply_text("❌ حدث خطأ في عرض القائمة")

async def show_withdraw_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """عرض قائمة السحب"""
    query = update.callback_query
    await query.answer()
    
    try:
        user_id = query.from_user.id
        result = execute_db_query("SELECT balance FROM users WHERE user_id = ?", (user_id,))
        balance = result[0][0] if result else 0

        keyboard = [
            [InlineKeyboardButton("💳 سحب الأرباح", callback_data="withdraw_profits")],
            [InlineKeyboardButton("🔙 رجوع", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"💳 نظام السحب\n\n"
            f"💰 رصيدك الحالي: {balance:.2f} USDT\n\n"
            f"اختر نوع السحب:",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"❌ خطأ في عرض قائمة السحب: {e}")

# ==================== معالجة الرسائل الموحدة ====================
async def handle_user_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة جميع رسائل المستخدمين"""
    try:
        # إذا كان بانتظار التسجيل
        if context.user_data.get('awaiting_registration'):
            await handle_user_registration(update, context)
            return
            
        # إذا كان بانتظار السحب
        if context.user_data.get('awaiting_withdrawal'):
            await process_withdrawal_request(update, context)
            return
            
        # إذا كان بانتظار عنوان المحفظة
        if context.user_data.get('awaiting_wallet'):
            await handle_wallet_address(update, context)
            return
            
        # إذا لا يوجد حالة انتظار - تحويل الرسالة للإدارة
        await forward_to_admin(update, context)
        
    except Exception as e:
        logger.error(f"خطأ في معالجة الرسالة: {e}")
        await update.message.reply_text("❌ حدث خطأ في معالجة رسالتك")

async def handle_user_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة تسجيل المستخدم"""
    try:
        user_id = update.effective_user.id
        message_text = update.message.text

        lines = message_text.strip().split('\n')
        if len(lines) >= 3:
            name = lines[0].strip()
            phone = lines[1].strip()
            country = lines[2].strip()

            # حفظ في قاعدة البيانات
            execute_db_query('''
                INSERT OR REPLACE INTO users 
                (user_id, username, full_name, phone, country, balance, registration_date)
                VALUES (?, ?, ?, ?, ?, 0, datetime('now'))
            ''', (user_id, update.effective_user.username, name, phone, country))

            # مسح حالة الانتظار
            del context.user_data['awaiting_registration']

            await update.message.reply_text(
                f"✅ تم تسجيلك بنجاح!\n\n"
                f"👤 الاسم: {name}\n"
                f"📞 الهاتف: {phone}\n"
                f"🌍 البلد: {country}\n\n"
                f"🚀 الآن يمكنك استخدام البوت بشكل كامل!"
            )

            # عرض القائمة الرئيسية
            await show_main_menu(update, context)
            
        else:
            await update.message.reply_text(
                "❌ يرجى إرسال البيانات بالصيغة الصحيحة:\n\n"
                "الاسم الثلاثي\nرقم الهاتف\nالبلد\n\n"
                "مثال:\nمحمد أحمد علي\n966512345678\nالسعودية"
            )
            
    except Exception as e:
        logger.error(f"خطأ في التسجيل: {e}")
        await update.message.reply_text("❌ حدث خطأ في التسجيل")

async def handle_wallet_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة عنوان المحفظة"""
    try:
        user_id = update.effective_user.id
        wallet_address = update.message.text.strip()

        if len(wallet_address) < 10:
            await update.message.reply_text("❌ عنوان المحفظة قصير جداً")
            return

        # حفظ في قاعدة البيانات
        execute_db_query(
            'UPDATE users SET wallet_address = ? WHERE user_id = ?',
            (wallet_address, user_id)
        )

        # مسح حالة الانتظار
        del context.user_data['awaiting_wallet']

        await update.message.reply_text(
            f"✅ تم حفظ عنوان محفظتك!\n\n"
            f"📍 {wallet_address}\n\n"
            "الآن يمكنك استخدام /withdraw للسحب"
        )

    except Exception as e:
        logger.error(f"خطأ في حفظ المحفظة: {e}")
        await update.message.reply_text("❌ حدث خطأ في حفظ المحفظة")

async def forward_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """تحويل رسائل المستخدمين للإدارة"""
    try:
        user = update.effective_user
        message_text = update.message.text or "رسالة غير نصية"

        admin_text = (
            f"📬 رسالة جديدة\n\n"
            f"👤 الاسم: {user.first_name}\n"
            f"🔗 @{user.username or 'بدون'}\n"
            f"🆔 ID: {user.id}\n\n"
            f"💬 الرسالة: {message_text}"
        )

        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_text
        )
        
    except Exception as e:
        logger.error(f"خطأ في تحويل الرسالة: {e}")

# ==================== التشغيل الرئيسي ====================
def main():
    """الدالة الرئيسية لتشغيل البوت"""
    # تهيئة قاعدة البيانات
    init_database()
    
    app = Application.builder().token(MAIN_BOT_TOKEN).build()

    # إضافة المعالجات
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("panel", handle_admin_commands))
    app.add_handler(CommandHandler("stats", handle_admin_commands))
    
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_messages))
    app.add_handler(CallbackQueryHandler(handle_callback_query))
    
    app.add_handler(MessageHandler(filters.TEXT & filters.Chat(chat_id=ADMIN_CHAT_ID), handle_admin_commands))

    print("🎉 البوت شغال الآن!")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
