import os
import asyncio
import logging
import sqlite3
import time
from datetime import datetime, date
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# 🔧 إعدادات التسجيل
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# 🔐 المتغيرات الثابتة
MAIN_BOT_TOKEN = "7566859808:AAFHlYo7nVIGDe6jnYIiI1EfsU-HeCntH5E"
ADMIN_CHAT_ID = "-1003178411340"
ERROR_CHANNEL = "-1003091305351"
WALLET_ADDRESS = "TYy5CnBE3k6g5aNZhTNLX1WEnLk6fQ5Xz2"

# 📊 خطط الاشتراك
SUBSCRIPTION_PLANS = {
    "basic": {"name": "الخطة الأساسية", "price": 25, "days": 30, "profits": "5-10% يومياً"},
    "pro": {"name": "الخطة المتقدمة", "price": 50, "days": 30, "profits": "10-15% يومياً"},
    "vip": {"name": "الخطة المميزة", "price": 100, "days": 30, "profits": "15-20% يومياً"}
}

# ==================== قاعدة البيانات ====================
def init_database():
    """تهيئة قاعدة البيانات"""
    try:
        conn = sqlite3.connect('trading_bot.db', check_same_thread=False)
        c = conn.cursor()
        
        c.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                full_name TEXT,
                phone TEXT,
                country TEXT,
                balance REAL DEFAULT 0.0,
                registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("✅ قاعدة البيانات مهيأة")
    except Exception as e:
        logger.error(f"❌ خطأ في قاعدة البيانات: {e}")

init_database()

def get_user_data(user_id):
    """جلب بيانات المستخدم"""
    try:
        conn = sqlite3.connect('trading_bot.db')
        c = conn.cursor()
        c.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        user = c.fetchone()
        conn.close()
        return user
    except Exception as e:
        logger.error(f"❌ خطأ في جلب بيانات المستخدم: {e}")
        return None

def update_user_balance(user_id, amount):
    """تحديث رصيد المستخدم"""
    try:
        conn = sqlite3.connect('trading_bot.db')
        c = conn.cursor()
        c.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"❌ خطأ في تحديث الرصيد: {e}")
        return False

# ==================== نظام الإشعارات ====================
async def send_admin_notification(message):
    """إرسال إشعار للأدمن"""
    try:
        app = Application.builder().token(MAIN_BOT_TOKEN).build()
        await app.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"👨‍💼 {message}\n⏰ {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        )
    except Exception as e:
        logger.error(f"❌ فشل إرسال الإشعار: {e}")

# ==================== البوت الرئيسي ====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """بدء البوت"""
    try:
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name

        user_data = get_user_data(user_id)

        if not user_data:
            context.user_data['awaiting_registration'] = True
            await update.message.reply_text(
                f"مرحباً {user_name}! 👋\n\n"
                "🚀 لإكمال التسجيل، يرجى إرسال:\n"
                "1. الاسم الثلاثي\n"
                "2. رقم الواتساب\n"
                "3. البلد\n\n"
                "مثال:\n"
                "محمد أحمد علي\n"
                "966512345678\n"
                "السعودية"
            )
            await send_admin_notification(f"👤 مستخدم جديد: {user_name} (ID: {user_id})")
        else:
            await show_main_menu(update, context)
    except Exception as e:
        logger.error(f"❌ خطأ في start: {e}")

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """عرض القائمة الرئيسية"""
    try:
        user_id = update.effective_user.id
        user_data = get_user_data(user_id)
        balance = user_data[5] if user_data else 0

        keyboard = [
            [InlineKeyboardButton("💼 خطط الاشتراك", callback_data="subscription_plans")],
            [InlineKeyboardButton("💰 رصيدي", callback_data="check_balance")],
            [InlineKeyboardButton("🎁 ادعو أصدقائك", callback_data="referral_system")],
            [InlineKeyboardButton("💳 سحب الأرباح", callback_data="withdraw_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.edit_message_text(
                f"مرحباً بعودتك! 👋\n💼 محفظتك: {balance:.2f} USDT\n\nاختر من القائمة:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                f"مرحباً بعودتك! 👋\n💼 محفظتك: {balance:.2f} USDT\n\nاختر من القائمة:",
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"❌ خطأ في عرض القائمة: {e}")

# ==================== نظام التسجيل ====================
async def handle_user_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة تسجيل المستخدم"""
    try:
        user_id = update.effective_user.id
        message_text = update.message.text

        if context.user_data.get('awaiting_registration'):
            lines = message_text.strip().split('\n')
            if len(lines) >= 3:
                name = lines[0].strip()
                phone = lines[1].strip()
                country = lines[2].strip()

                conn = sqlite3.connect('trading_bot.db')
                c = conn.cursor()
                c.execute('''
                    INSERT OR REPLACE INTO users (user_id, username, full_name, phone, country, balance)
                    VALUES (?, ?, ?, ?, ?, 0)
                ''', (user_id, update.effective_user.username, name, phone, country))
                conn.commit()
                conn.close()

                del context.user_data['awaiting_registration']

                await update.message.reply_text(
                    f"✅ تم تسجيلك بنجاح!\n\n👤 الاسم: {name}\n📞 الهاتف: {phone}\n🌍 البلد: {country}\n\n🚀 الآن يمكنك استخدام البوت!"
                )

                await send_admin_notification(f"👤 تسجيل جديد: {name} - {phone} - {country} - ID: {user_id}")

                await show_main_menu(update, context)
            else:
                await update.message.reply_text("❌ يرجى إرسال البيانات بالصيغة الصحيحة")
            return

    except Exception as e:
        logger.error(f"❌ خطأ في التسجيل: {e}")

# ==================== نظام السحب ====================
async def show_withdraw_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """عرض قائمة السحب"""
    try:
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        user_data = get_user_data(user_id)
        balance = user_data[5] if user_data else 0

        keyboard = [
            [InlineKeyboardButton("💳 سحب الأرباح", callback_data="withdraw_profits")],
            [InlineKeyboardButton("🔙 رجوع", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"💳 نظام السحب\n\n💰 رصيدك: {balance:.2f} USDT\n\nاختر نوع السحب:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"❌ خطأ في عرض سحب: {e}")

async def handle_withdraw_profits(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة سحب الأرباح"""
    try:
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        user_data = get_user_data(user_id)
        balance = user_data[5] if user_data else 0

        if balance < 25:
            await query.edit_message_text(
                f"❌ لا يمكن السحب\n\n💰 رصيدك: {balance:.2f} USDT\n📊 الحد الأدنى: 25 USDT",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("🔙 رجوع", callback_data="withdraw_menu")]])
            )
            return

        context.user_data['awaiting_withdrawal'] = True
        context.user_data['withdrawal_user_id'] = user_id
        context.user_data['withdrawal_amount'] = balance

        await query.edit_message_text(
            f"💳 طلب سحب الأرباح\n\n💰 المبلغ: {balance:.2f} USDT\n⏰ مدة المعالجة: 24 ساعة\n\n🔗 يرجى إرسال عنوان محفظتك:"
        )

    except Exception as e:
        logger.error(f"❌ خطأ في سحب: {e}")

async def handle_withdrawal_wallet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة عنوان المحفظة للسحب"""
    try:
        user_id = context.user_data.get('withdrawal_user_id')
        wallet_address = update.message.text.strip()
        amount = context.user_data.get('withdrawal_amount')

        if not user_id:
            await update.message.reply_text("❌ جلسة منتهية")
            return

        if len(wallet_address) < 10:
            await update.message.reply_text("❌ عنوان غير صالح")
            return

        user_data = get_user_data(user_id)
        if not user_data:
            await update.message.reply_text("❌ مستخدم غير موجود")
            return

        balance, full_name, username = user_data[5], user_data[2], user_data[1]

        keyboard = [
            [
                InlineKeyboardButton("✅ تم التحويل", callback_data=f"confirm_withdrawal:{user_id}:{amount}"),
                InlineKeyboardButton("🔄 جاري المعالجة", callback_data=f"processing_withdrawal:{user_id}:{amount}")
            ],
            [
                InlineKeyboardButton("❌ رفض الطلب", callback_data=f"reject_withdrawal:{user_id}"),
                InlineKeyboardButton("📩 إرسال رسالة", callback_data=f"message_user:{user_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"🔄 طلب سحب جديد:\n\n👤 الاسم: {full_name}\n🔗 @{username or 'بدون'}\n🆔 ID: {user_id}\n💰 المبلغ: {amount} USDT\n💳 الرصيد: {balance} USDT\n🔗 المحفظة: {wallet_address}\n\n⏰ {datetime.now().strftime('%Y-%m-%d %H:%M')}",
            reply_markup=reply_markup
        )

        await update.message.reply_text(
            f"✅ تم استلام طلب السحب!\n\n💳 المحفظة: {wallet_address}\n💰 المبلغ: {amount} USDT\n\n🔄 جاري المعالجة..."
        )

        context.user_data.pop('awaiting_withdrawal', None)
        context.user_data.pop('withdrawal_user_id', None)
        context.user_data.pop('withdrawal_amount', None)

    except Exception as e:
        logger.error(f"❌ خطأ في معالجة السحب: {e}")

# ==================== نظام الإدارة ====================
async def send_admin_panel(context: ContextTypes.DEFAULT_TYPE):
    """إرسال لوحة الأدمن للقناة"""
    try:
        keyboard = [
            [InlineKeyboardButton("📩 المراسلة", callback_data="messaging_system")],
            [InlineKeyboardButton("📊 الإحصائيات", callback_data="admin_stats")],
            [InlineKeyboardButton("👥 المستخدمين", callback_data="admin_users")],
            [InlineKeyboardButton("💰 إضافة أرباح", callback_data="add_profit_menu")],
            [InlineKeyboardButton("🔄 تحديث", callback_data="admin_refresh")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text="🛠️ **لوحة تحكم الأدمن**\n\nاختر الإدارة المطلوبة:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        logger.info("✅ تم إرسال لوحة الأدمن")
    except Exception as e:
        logger.error(f"❌ خطأ في لوحة الأدمن: {e}")

async def admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """بدء لوحة الأدمن"""
    try:
        query = update.callback_query
        await query.answer()

        keyboard = [
            [InlineKeyboardButton("📩 المراسلة", callback_data="messaging_system")],
            [InlineKeyboardButton("📊 الإحصائيات", callback_data="admin_stats")],
            [InlineKeyboardButton("👥 المستخدمين", callback_data="admin_users")],
            [InlineKeyboardButton("💰 إضافة أرباح", callback_data="add_profit_menu")],
            [InlineKeyboardButton("🔄 تحديث", callback_data="admin_refresh")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "🛠️ **لوحة تحكم الأدمن**\n\nاختر الإدارة المطلوبة:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"❌ خطأ في admin_start: {e}")

async def show_admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """عرض إحصائيات الأدمن"""
    query = update.callback_query
    await query.answer()
    
    try:
        conn = sqlite3.connect('trading_bot.db')
        c = conn.cursor()
        
        c.execute("SELECT COUNT(*) FROM users")
        total_users = c.fetchone()[0]
        
        c.execute("SELECT SUM(balance) FROM users")
        total_balance = c.fetchone()[0] or 0
        
        conn.close()
        
        stats_text = f"📊 إحصائيات البوت\n\n👥 المستخدمين: {total_users}\n💰 الأرصدة: {total_balance:.2f} USDT\n🕒 آخر تحديث: {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        
        keyboard = [[InlineKeyboardButton("🔙 رجوع", callback_data="admin_refresh")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(stats_text, reply_markup=reply_markup)
        
    except Exception as e:
        await query.message.reply_text(f"❌ خطأ في الإحصائيات: {e}")

# ==================== معالجة الأزرار ====================
async def handle_callback_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة جميع الأزرار"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    try:
        logger.info(f"🔘 زر مضغوط: {data}")
        
        if data == "back_to_main":
            await show_main_menu(update, context)
        elif data == "withdraw_menu":
            await show_withdraw_menu(update, context)
        elif data == "withdraw_profits":
            await handle_withdraw_profits(update, context)
        elif data.startswith("confirm_withdrawal:"):
            parts = data.split(":")
            user_id = int(parts[1])
            amount = float(parts[2])
            await confirm_withdrawal(update, context, user_id, amount)
        elif data.startswith("reject_withdrawal:"):
            user_id = int(data.split(":")[1])
            await reject_withdrawal(update, context, user_id)
        elif data == "admin_stats":
            await show_admin_stats(update, context)
        elif data == "admin_users":
            await show_admin_users(update, context)
        elif data == "add_profit_menu":
            await query.message.reply_text("💰 إضافة أرباح للمستخدم\n\nاستخدم: /addprofit <user_id> <amount>\nمثال: /addprofit 123456789 100.5")
        elif data == "admin_refresh":
            await send_admin_panel(context)
            await query.answer("✅ تم التحديث")
        elif data == "subscription_plans":
            await show_subscription_plans(update, context)
        elif data == "check_balance":
            user_id = query.from_user.id
            user_data = get_user_data(user_id)
            balance = user_data[5] if user_data else 0
            await query.edit_message_text(f"💼 رصيدك: {balance:.2f} USDT")
        elif data == "referral_system":
            await show_referral_system(update, context)
        else:
            await query.answer("⚙️ قيد التطوير")
            
    except Exception as e:
        logger.error(f"❌ خطأ في الزر {data}: {e}")

async def confirm_withdrawal(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, amount: float):
    """تأكيد السحب"""
    query = update.callback_query
    
    try:
        conn = sqlite3.connect('trading_bot.db')
        c = conn.cursor()
        c.execute('UPDATE users SET balance = balance - ? WHERE user_id = ?', (amount, user_id))
        conn.commit()
        conn.close()
        
        await context.bot.send_message(
            chat_id=user_id,
            text=f"✅ تم تحويل المبلغ بنجاح!\n\n💰 المبلغ: {amount} USDT\n\nشكراً لاستخدامك خدماتنا. 🌟"
        )
        
        await query.edit_message_text(
            text=query.message.text + f"\n\n✅ تم التحويل بواسطة {query.from_user.first_name}",
            reply_markup=None
        )
        
    except Exception as e:
        await query.message.reply_text(f"❌ فشل في السحب: {e}")

async def reject_withdrawal(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """رفض السحب"""
    query = update.callback_query
    
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text="❌ تم رفض طلب السحب\n\nيرجى التواصل مع الدعم."
        )
        
        await query.edit_message_text(
            text=query.message.text + f"\n\n❌ تم الرفض بواسطة {query.from_user.first_name}",
            reply_markup=None
        )
        
    except Exception as e:
        await query.message.reply_text(f"❌ فشل في الرفض: {e}")

# ==================== دوال إضافية ====================
async def show_subscription_plans(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """عرض خطط الاشتراك"""
    try:
        query = update.callback_query
        await query.answer()

        keyboard = []
        for plan_id, plan in SUBSCRIPTION_PLANS.items():
            keyboard.append([InlineKeyboardButton(f"{plan['name']} - {plan['price']} USDT", callback_data=f"subscribe_{plan_id}")])

        keyboard.append([InlineKeyboardButton("🔙 رجوع", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        plans_text = "💼 خطط الاشتراك:\n\n"
        for plan_id, plan in SUBSCRIPTION_PLANS.items():
            plans_text += f"{plan['name']}\n💰 السعر: {plan['price']} USDT\n⏳ المدة: {plan['days']} يوم\n📈 الأرباح: {plan['profits']}\n\n"

        await query.edit_message_text(plans_text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"❌ خطأ في الخطط: {e}")

async def show_admin_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """عرض المستخدمين"""
    query = update.callback_query
    
    try:
        conn = sqlite3.connect('trading_bot.db')
        c = conn.cursor()
        c.execute("SELECT user_id, full_name, balance FROM users ORDER BY registration_date DESC LIMIT 10")
        users = c.fetchall()
        conn.close()
        
        users_text = "👥 آخر 10 مستخدمين:\n\n"
        for user in users:
            user_id, full_name, balance = user
            users_text += f"🆔 {user_id} | 📛 {full_name or 'غير معروف'} | 💰 {balance}\n"
        
        keyboard = [[InlineKeyboardButton("🔙 رجوع", callback_data="admin_refresh")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(users_text, reply_markup=reply_markup)
        
    except Exception as e:
        await query.message.reply_text(f"❌ خطأ في المستخدمين: {e}")

async def show_referral_system(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """عرض نظام الإحالة"""
    try:
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        referral_code = f"REF{user_id}"
        referral_link = f"https://t.me/Arba7Saudi_bot?start={referral_code}"

        referral_text = f"""🎁 **نظام الدعوة**

💼 **كود دعوتك:** `{referral_code}`

🔗 **رابط الدعوة:**
`{referral_link}`

📣 **كيف تستخدم:**
1. انسخ الرابط 📋
2. أرسله لأصدقائك 📤
3. احصل على عمولة 10% 💰"""

        keyboard = [
            [InlineKeyboardButton("📋 نسخ الرابط", callback_data="copy_referral_link")],
            [InlineKeyboardButton("🔙 رجوع", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(referral_text, reply_markup=reply_markup, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"❌ خطأ في الإحالة: {e}")

# ==================== معالجة الرسائل ====================
async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة جميع الرسائل"""
    try:
        if context.user_data.get('awaiting_withdrawal'):
            await handle_withdrawal_wallet(update, context)
            return
            
        if context.user_data.get('awaiting_registration'):
            await handle_user_registration(update, context)
            return
            
        await update.message.reply_text("❌ لم أفهم رسالتك. استخدم الأزرار في القائمة.")
        
    except Exception as e:
        logger.error(f"❌ خطأ في الرسالة: {e}")

# ==================== أوامر الأدمن ====================
async def handle_add_profit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """إضافة أرباح"""
    try:
        if len(context.args) != 2:
            await update.message.reply_text("📊 استخدام: /addprofit <user_id> <amount>\nمثال: /addprofit 123456789 100.5")
            return

        target_user_id = int(context.args[0])
        amount = float(context.args[1])

        if update_user_balance(target_user_id, amount):
            await update.message.reply_text(f"✅ تم إضافة {amount} للمستخدم {target_user_id}")
            
            try:
                await context.bot.send_message(
                    chat_id=target_user_id,
                    text=f"🎉 تم إضافة أرباح جديدة!\n💰 المبلغ: {amount}\n\nشكراً لثقتك! 🌟"
                )
            except:
                pass
        else:
            await update.message.reply_text("❌ فشل في الإضافة")
            
    except Exception as e:
        logger.error(f"❌ خطأ في الأرباح: {e}")

# ==================== التشغيل الرئيسي ====================
def main():
    """الدالة الرئيسية"""
    app = Application.builder().token(MAIN_BOT_TOKEN).build()

    # إضافة المعالجات
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("addprofit", handle_add_profit))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_all_messages))
    app.add_handler(CallbackQueryHandler(handle_callback_buttons))

    # إرسال لوحة الأدمن عند البدء
    async def send_initial_panel(application: Application):
        await send_admin_panel(application)
    
    app.post_init = send_initial_panel

    print("🎉 البوت شغال الآن!")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
