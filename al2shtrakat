# 📊 خطط الاشتراك
SUBSCRIPTION_PLANS = {
    "basic": {
        "name": "الخطة الأساسية",
        "price": 25,
        "days": 30,
        "profits": "5-10% يومياً"
    },
    "pro": {
        "name": "الخطة المتقدمة",
        "price": 50,
        "days": 30,
        "profits": "10-15% يومياً"
    },
    "vip": {
        "name": "الخطة المميزة",
        "price": 100,
        "days": 30,
        "profits": "15-20% يومياً"
    }
}

# ==================== عرض خطط الاشتراك ====================
async def show_subscription_plans(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """عرض جميع خطط الاشتراك"""
    try:
        query = update.callback_query
        await query.answer()

        keyboard = []
        for plan_id, plan in SUBSCRIPTION_PLANS.items():
            keyboard.append([
                InlineKeyboardButton(
                    f"{plan['name']} - {plan['price']} USDT",
                    callback_data=f"subscribe_{plan_id}"
                )
            ])

        keyboard.append([InlineKeyboardButton("🔙 رجوع", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        plans_text = "💼 خطط الاشتراك المتاحة:\n\n"
        for plan_id, plan in SUBSCRIPTION_PLANS.items():
            plans_text += f"{plan['name']}\n"
            plans_text += f"💰 السعر: {plan['price']} USDT\n"
            plans_text += f"⏳ المدة: {plan['days']} يوم\n"
            plans_text += f"📈 الأرباح: {plan['profits']}\n\n"

        await query.edit_message_text(plans_text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"❌ خطأ في عرض خطط الاشتراك: {e}")
        await send_error_notification(f"خطأ في عرض خطط الاشتراك: {e}")

# ==================== معالجة الاشتراك ====================
async def handle_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """معالجة طلب الاشتراك"""
    try:
        query = update.callback_query
        plan_id = query.data.split("_")[1]
        plan = SUBSCRIPTION_PLANS[plan_id]

        await query.answer()

        subscription_text = (
            f"🎉 تم اختيار خطتك بنجاح!\n\n"
            f"🔹 الخطة: {plan['name']}\n"
            f"💰 السعر: {plan['price']} USDT\n"
            f"⏳ المدة: {plan['days']} يوم\n"
            f"📊 الأرباح المتوقعة: {plan['profits']}\n\n"
            f"💡 للمتابعة يرجى إتمام عملية الدفع على العنوان التالي:\n"
            f"`{WALLET_ADDRESS}`\n\n"
            f"⚠️ ملاحظة:\n"
            f"• تأكد أن التحويل يتم باستخدام شبكة TRC20 فقط\n"
            f"• سيتم تفعيل اشتراكك خلال 15 دقيقة بعد التأكيد\n\n"
            f"بعد الدفع، اضغط على زر تأكيد الدفع وأرسل صورة التحويل"
        )

        keyboard = [
            [InlineKeyboardButton("📸 تأكيد الدفع وإرسال الإثبات", callback_data=f"confirm_payment_{plan_id}")],
            [InlineKeyboardButton("🔙 رجوع للخطط", callback_data="subscription_plans")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(subscription_text, reply_markup=reply_markup, parse_mode='Markdown')

        # إشعار الأدمن بطلب اشتراك
        user = get_user_data(query.from_user.id)
        user_name = user[1] if user else query.from_user.first_name
        await send_admin_notification(
            f"🔄 طلب اشتراك جديد\n"
            f"👤 المستخدم: {user_name}\n"
            f"🆔 الأيدي: {query.from_user.id}\n"
            f"📋 الخطة: {plan['name']}\n"
            f"💰 المبلغ: {plan['price']} USDT"
        )
    except Exception as e:
        logger.error(f"❌ خطأ في معالجة الاشتراك: {e}")
        await send_error_notification(f"خطأ في معالجة الاشتراك: {e}")

# ==================== تأكيد الدفع ====================
async def confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """تأكيد إرسال إثبات الدفع"""
    try:
        query = update.callback_query
        plan_id = query.data.split("_")[2]
        plan = SUBSCRIPTION_PLANS[plan_id]

        await query.answer()
        await query.edit_message_text(
            f"📸 جاهز لاستلام إثبات الدفع للخطة {plan['name']}\n\n"
            f"💰 المبلغ: {plan['price']} USDT\n\n"
            f"يرجى إرسال صورة إشعار التحويل الآن\n\n"
            f"⚠️ تأكد من ظهور في الصورة:\n"
            f"• المبلغ المحول\n"
            f"• عنوان المحفظة المرسل إليها\n"
            f"• تاريخ ووقت التحويل"
        )

        context.user_data['awaiting_payment_proof'] = plan_id
    except Exception as e:
        logger.error(f"❌ خطأ في تأكيد الدفع: {e}")
        await send_error_notification(f"خطأ في تأكيد الدفع: {e}")

# ==================== معالجة صورة التحويل ====================
async def handle_payment_proof(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """معالجة صورة إثبات الدفع"""
    try:
        user_id = update.effective_user.id
        user_data = get_user_data(user_id)
        user_name = user_data[1] if user_data else update.effective_user.first_name

        if 'awaiting_payment_proof' in context.user_data:
            plan_id = context.user_data['awaiting_payment_proof']
            plan = SUBSCRIPTION_PLANS[plan_id]

            await update.message.reply_text(
                "✅ تم استلام صورة الإثبات بنجاح!\n\n"
                "⏳ جاري مراجعة التحويل وتفعيل اشتراكك...\n"
                "سيصلك إشعار خلال 15 دقيقة كحد أقصى"
            )

            # إرسال الصورة والإشعار للأدمن
            app = Application.builder().token(MAIN_BOT_TOKEN).build()

            # إعداد زر الموافقة
            keyboard = [
                [InlineKeyboardButton("✅ تأكيد الاشتراك", callback_data=f"approve_sub_{user_id}_{plan_id}")],
                [InlineKeyboardButton("❌ رفض الاشتراك", callback_data=f"reject_sub_{user_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            caption = (
                f"📨 إشعار تحويل جديد\n"
                f"👤 من: {user_name}\n"
                f"🆔 الأيدي: {user_id}\n"
                f"📋 الخطة: {plan['name']}\n"
                f"💰 المبلغ: {plan['price']} USDT"
            )

            await app.bot.send_photo(
                chat_id=ERROR_CHANNEL,  # استخدام قناة الأخطاء للإدارة
                photo=update.message.photo[-1].file_id,
                caption=caption,
                reply_markup=reply_markup
            )

            del context.user_data['awaiting_payment_proof']

        else:
            await update.message.reply_text("❌ لم تطلب تأكيد دفع، يرجى اختيار خطة أولاً")
    except Exception as e:
        await update.message.reply_text("❌ حدث خطأ في معالجة الصورة، يرجى المحاولة مرة أخرى")
        await send_error_notification(f"خطأ في معالجة صورة الدفع: {e}")


